---
# Source: gitpod/charts/rabbitmq/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RELEASE-NAME
  ingress:
    # Allow inbound connections
    - ports:
        - port: 4369  # EPMD
        - port: 5672
        - port: 5671
        - port: 25672
        - port: 15672
    # Allow prometheus scrapes
    - ports:
        - port: 9419
---
# Source: gitpod/templates/blobserve-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blobserve
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: blobserve
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 32224
    from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: proxy
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: ws-proxy
---
# Source: gitpod/templates/content-service-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: content-service
  labels:
    app: RELEASE-NAME
    component: content-service
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: content-service
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/dashboard-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dashboard-deny-all-allow-explicit
  labels:
    app: RELEASE-NAME
    component: dashboard
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: dashboard
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 80
    from:
    # Allow ingress on port 80 from component:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: proxy
---
# Source: gitpod/templates/db-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-deny-all-allow-explicit
  labels:
    app: RELEASE-NAME
    component: db
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: db
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 3306
    from:
    # Allow ingress on port 3306 from component:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: server
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: credit-watcher
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: agent-smith
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: payment-endpoint
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: ws-manager-bridge
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: db-migrations
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: postman
---
# Source: gitpod/templates/image-builder-mk3-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: image-builder-mk3
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: image-builder-mk3
  policyTypes:
  - Ingress
  - Egress
  ingress:
    # server
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: server
  egress:
  - to:
    # Allow egress to everywhere, except...
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        # Google Compute engine special, reserved VM metadata IP
        - 169.254.169.254/32
---
# Source: gitpod/templates/image-builder-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: image-builder
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: image-builder
  policyTypes:
  - Ingress
  - Egress
  ingress:
    # server
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: server
  egress:
  - to:
    # Allow egress to everywhere, except...
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        # Google Compute engine special, reserved VM metadata IP
        - 169.254.169.254/32
---
# Source: gitpod/templates/proxy-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy-deny-all-allow-explicit
  labels:
    app: RELEASE-NAME
    component: proxy
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: proxy
  policyTypes:
  - Ingress
  ingress:
  # Allow access to HTTP(S) ports from everywhere
  - ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow prometheus scraping from proxy /metrics endpoint
  - ports:
    - protocol: TCP
      port: 9145
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
---
# Source: gitpod/templates/registry-facade-allow-all-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: registry-facade
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: registry-facade
  policyTypes:
  - Ingress
  ingress:
  # allow ingress for everyone in the cluster. The workspace pods have an egress limit that prevents them from accessing the registry-facade service anyways.
  - {}
---
# Source: gitpod/templates/server-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: server-deny-all-allow-explicit
  labels:
    app: RELEASE-NAME
    component: server
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: server
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 3000
    from:
    # Allow ingress on port 3000 from component:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: proxy
  # Allow to access health and mornitoring endpoints listening on port 9500
  - ports:
    - protocol: TCP
      port: 9500
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: proxy
---
# Source: gitpod/templates/workspace-networkpolicy-default.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: workspace-default
  labels:
    app: RELEASE-NAME
    component: workspace
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      # not RELEASE-NAME here because the workspaces know nothing about the helm deployment
      app: gitpod
      component: workspace
      gitpod.io/networkpolicy: default
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # TODO WSPROXY remove
  # ALLOW ingress from proxy
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: proxy
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: ws-proxy
  # ALLOW ingress from agent-smith
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: agent-smith
  # ALLOW ingress from ws-daemon
  - from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: ws-daemon
  # ALLOW prometheus scraping from theia backend
  - ports:
    - protocol: TCP
      port: 23000
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
  # egress:
  # - to:
  #   - podSelector:
  #       matchLabels:
  #         app: gitpod
  #         component: proxy
  # - to:
  #   - namespaceSelector:
  #       matchLabels:
  #         component: proxy
  #     podSelector:
  #       matchLabels:
  #         app: staging-proxy
  # Allow egress to everywhere, except...
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        # The condition is necessary because the network setup in the devstaging cluster is different to prod/staging atm
#
#         # Local DNS server
#         - 10.0.0.0/24
#         # Cluster local traffic (pods, services)
#         - 10.0.0.0/8
#
        # Google Compute engine special, reserved VM metadata IP
        - 169.254.169.254/32
  # As the except rules (10.0.0.0/x) above block access to the proxy (even via external IPs!!!): Explicitly allow it here!
  - to:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
---
# Source: gitpod/templates/ws-daemon-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-daemon
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-daemon
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 8080
    from:
    - podSelector:
        matchLabels:
          app: RELEASE-NAME
          component: ws-manager
  - ports:
    - protocol: TCP
      port: 9500
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
---
# Source: gitpod/templates/ws-manager-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-manager
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-manager
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/ws-proxy-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-proxy
  labels:
    app: RELEASE-NAME
    component: ws-proxy
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-proxy
  policyTypes:
  - Ingress
  ingress:
  # Allow access to HTTP/HTTPS proxy ports from everywhere
  - ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
---
# Source: gitpod/templates/ws-scheduler-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-scheduler
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-scheduler
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/resource-quotas.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# https://kubernetes.io/docs/concepts/policy/resource-quotas/
apiVersion: v1
kind: ResourceQuota
metadata:
  name: gitpod-resource-quota
  namespace: staging-laushinka-self-hosted-v-builtin-5491
spec:
  hard:
    pods: 10k
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values:
      - system-node-critical
---
# Source: gitpod/templates/cluster-privileged-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-privileged
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Source: gitpod/templates/cluster-privileged-unconfined-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  # This PSP *must* be used before the psp:privileged coming from gitpod. The PSP controller will order them alphabetically by name.
  # See https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order.
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-privileged-unconfined
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'unconfined'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'unconfined'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default,unconfined'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: false
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: false
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Source: gitpod/templates/cluster-restricted-root-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-restricted-root-user
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  #####
  # The nginx master process (currently?) runs as root, thus we have to turn some safe things off
  #####
  ### TODO root proxy
  privileged: true
  # # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  # requiredDropCapabilities:
  #   - ALL
  ### TODO root proxy
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'projected'
    - 'secret'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'hostPath'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 30000
    max: 33000
  runAsUser:
    ### TODO root proxy
    rule: 'RunAsAny'
    ### TODO root proxy
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/cluster-unprivileged-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-unprivileged
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  requiredDropCapabilities:
    - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    # - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/registry-facade-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-registry-facade
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  #####
  # The nginx master process (currently?) runs as root, thus we have to turn some safe things off
  #####
  ### TODO root proxy
  # privileged: false
  # # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  # requiredDropCapabilities:
  #   - ALL
  ### TODO root proxy
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'secret'
    - 'emptyDir'
    - 'hostPath'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 30000
    max: 33000
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/workspace-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-workspace
  labels:
    app: RELEASE-NAME
    component: workspace
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default,unconfined'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: true
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  allowedCapabilities:
    - AUDIT_WRITE
    - FSETID
    - KILL
    - NET_BIND_SERVICE
    - SYS_PTRACE
  volumes:
    - 'configMap'
    - 'projected'
    - 'secret'
    - 'hostPath'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/charts/rabbitmq/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RELEASE-NAME
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
---
# Source: gitpod/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "minio"
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app: minio
    chart: minio-8.0.10
    release: "RELEASE-NAME"
---
# Source: gitpod/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: messagebus
---
# Source: gitpod/templates/blobserve-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: blobserve
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: service-account
    stage: production
---
# Source: gitpod/templates/cluster-nobody-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nobody
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/content-service-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: content-service
  labels:
    app: RELEASE-NAME
    component: content-service
    kind: service-account
    stage: production
---
# Source: gitpod/templates/dashboard-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard
  labels:
    app: RELEASE-NAME
    component: dashboard
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/db-migrations-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-migrations
  labels:
    app: RELEASE-NAME
    component: db-migrations
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/db-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: db
  labels:
    app: RELEASE-NAME
    component: db
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/image-builder-mk3-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-builder-mk3
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: service-account
    stage: production
---
# Source: gitpod/templates/image-builder-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-builder
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: service-account
    stage: production
---
# Source: gitpod/templates/proxy-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy
  labels:
    app: RELEASE-NAME
    component: proxy
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/registry-facade-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-facade
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: service-account
    stage: production
---
# Source: gitpod/templates/server-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: server
  labels:
    app: RELEASE-NAME
    component: server
    kind: service-account
    stage: production
---
# Source: gitpod/templates/workspace-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: workspace
  labels:
    app: RELEASE-NAME
    component: workspace
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-daemon-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-daemon
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-manager-bridge-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-manager-bridge
  labels:
    app: RELEASE-NAME
    component: ws-manager-bridge
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-manager-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-manager
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-proxy-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-proxy
  labels:
    app: RELEASE-NAME
    component: ws-proxy
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-scheduler-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-scheduler
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: service-account
    stage: production
---
# Source: gitpod/charts/docker-registry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    heritage: Helm
    release: RELEASE-NAME
type: Opaque
data:
  haSharedSecret: "clZLN1d5MUp0WmNlbE16RA=="
---
# Source: gitpod/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
type: Opaque
data:
  accesskey: "eHh4eHg="
  secretkey: "eHh4eHg="
---
# Source: gitpod/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
---
# Source: gitpod/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: load-definition
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  load_definition.json: |
    {
      "users": [{
        "name": "xxxxx",
        "password": "xxxxx",
        "tags": "administrator"
      }],
      "vhosts": [{
        "name": "/"
      }],
      "parameters": [],
      "permissions": [{
        "user": "xxxxx",
        "vhost": "/",
        "configure": ".*",
        "write": ".*",
        "read": ".*"
      }],
      "exchanges": [{
        "name": "gitpod.ws",
        "vhost": "/",
        "type": "topic",
        "durable": true,
        "auto_delete": false
      }, {
        "name": "gitpod.ws.local",
        "vhost": "/",
        "type": "topic",
        "durable": true,
        "auto_delete": false
      }, {
        "name": "wsman",
        "vhost": "/",
        "type": "topic",
        "durable": false,
        "auto_delete": false
      }, {
        "name": "consensus-leader",
        "vhost": "/",
        "type": "fanout",
        "durable": false,
        "auto_delete": false
      }],
      "bindings": [{
        "source": "gitpod.ws.local",
        "vhost": "/",
        "destination": "gitpod.ws",
        "destination_type": "exchange",
        "routing_key": "#",
        "arguments": {}
      }],
      "queues": [{
        "name": "consensus-peers",
        "vhost": "/",
        "durable": false,
        "auto_delete": false,
        "arguments": {}
      }, {
        "name": "pwsupdatable",
        "vhost": "/",
        "durable": true,
        "auto_delete": false,
        "arguments": {}
      }],
      "policies": [{
        "name": "ha-all",
        "vhost": "/",
        "pattern": ".*",
        "definition": {
          "ha-mode": "all",
          "ha-sync-mode": "automatic",
          "ha-sync-batch-size": 5
        }
      }]
    }
---
# Source: gitpod/templates/builtin-registry-auth-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
apiVersion: v1
kind: Secret
metadata:
  name: builtin-registry-auth
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5sb2NhbGhvc3QiOnsiYXV0aCI6ImFrcFlSRkZyVlVKVFRrVTFjelpCWlhWWVZHczZhamRETm1wcWFFb3hka2hVVHpSdGNUVnBRVGs9In19fQ==
  user: akpYRFFrVUJTTkU1czZBZXVYVGs=
  password: ajdDNmpqaEoxdkhUTzRtcTVpQTk=
---
# Source: gitpod/templates/builtin-registry-certs-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: builtin-registry-certs
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
    checksum/cert: 0ddf51b20823d34a1a06e0d26e09d0748dd2e1bfbd94c9501ca912676b4ba745
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHRENDQWdDZ0F3SUJBZ0lSQU1ySDJ5bnh4U1JtU3h0WEFhb3FBWXd3RFFZSktvWklodmNOQVFFTEJRQXcKRmpFVU1CSUdBMVVFQXhNTGQzTmtZV1Z0YjI0dFkyRXdIaGNOTWpFd09URTJNRGd5T0RRMFdoY05Nakl3T1RFMgpNRGd5T0RRMFdqQVdNUlF3RWdZRFZRUURFd3QzYzJSaFpXMXZiaTFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1ma3BKdEFvY1dHaWExa0QzQzFWUldER1lwbU5aQTdxN2Z0Vnp6QVpwU2QKUVA5ZW9kMVNsbDVRWE5nRVpCQjZrNDFHOTdoY2FocWpOb0ZyQWVHaGdaZlVoTkRPb05HNU5JRUsveWdyaEh1VApYMHJBeXFxeklOS0F3MitwMkNyNWV6bzRzN0grdmw1cDFRMEFQYkloaTV5WXlGaC9uN0dhRm5rZG1WNGdHTXg2CjI3anBkRFllcjlaY1hMdGtZSnRvbmlzNGtxS2VodUVnNWp2RFZNZllRNVRZdm5TeFdPU1BkanBsTkx3S3JPc2EKLy9wQ290QldwNk9NUE5xeWtZS1YxTTNnK3kycHNVK3p3aHlNQndGT05DWlA0OFE5VDRxRTZFN3FDS2FMUVphVgpmOFFFRy9QV1o2MStETEdPN0JlMWZDdFBmOElIdXZjZENtZnBDWWdNczVjQ0F3RUFBYU5oTUY4d0RnWURWUjBQCkFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUIKQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSU25WTGRsQzlyMC9TVS9VSWpiNzgxOXk2UmFEQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBQ3kwYm1sNjMwc1JXVEZaY2R5c3NYbTd1OHBQWW16V0FQYWRnL0xUUUJiL3VoOWgxClAzcWU0L2k3cXZwR2VwbXdMOGVLUHMzbVBBYXVGYmtkVXl4d1AxUUdSVEZuNCttNXdKbmkwZmhDMkJsbnFLeVQKRytDMzBuQWRmcngyQTFGZkFLWjlJNStuaXdKN3k2U1IyWDE4ZmVYNEl4VklEUGVLbG9saHhTQWJ2b2pxL1AyNworWVF4MjIzT1VFdkJFZUZ0NkNUNzRpU1NTVW0rdW9ySmpoUDZtaExhckF1UTViajg1c0ltSFNENk1xanB5Q2ZhCm9nLy9xclVwRy95QWlhNDJwQXg0ZmtDUTl0L2VyZFJXVzZBMFJ0dDFGNlVDRlhKTXo5WWFpVSthSEgxQSs0M1cKQ3RWdUZaQ1RxMFp3S0JIL29MRWtVczJ6OHVhZm5YUFFLR29ha3c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMmh6b2lKVnBpTC80VkZ0TC9neVNFQ1dxYjR3Wm1WRmpjWkRSa1RGQVdvVCtURWZaCjNVbXR1T0x3amhiYUFzZDQzUXU1c3p5R0lwUE1NYjVId1dJYUEvQTZ2VGxwaCtXZDNwamFVZFRPRkRZdk9hNHUKa0hGSmticWtJTmxlWWdxSFVSQ1krZUxjRXRXVkNrdUR3REdFb091L2ZXbVNCc0E4anpCRFhWSDdoSVowcFhmSwpYWGRERjRJUitHanpRbUwyNWhtbXdlL2ZiQ0tybG5hU2xsTEY2OU1pTDRyQVNHOUVmZkd4UFlWZTltOFNoa0l0Ck9OUkhsUk8xM2tYb0JOd3NySERYUys2akl5akVWdE1NWE9EYkxYZFB2Wm9ZZm9VaWgxTSs4MDMvQ3F4aUE4K0QKSXVQd0lCQTFpY3FGcXRYNFZXZy9mTERxYnI1RHFLRko5WEJNYXdJREFRQUJBb0lCQVFDWldnWHNNaERYUXhIWQpUYkJxV0hCQnhobkUvOTNudkIrTTgyTkZFRG5NNndEWXBSUDYwQmpDaTF6U3FpSnlIY2xPc1RYSlhWNTU1U3lHCk5PRENpTFQ5MitPUXMxTU5aMVhOOGU1ZDVwOVYrcHJObFRmTCtycmRLVHJJbGN3VVpvNnBZbUFNSVlMV0F6RWMKNGVjcU5DYXA5ZGJXMkdrQk1odmlHTzdrS0FZTk1DWnY0cmR2OXpLNlI0RHZoOXpyVG1oaDZmTmhYb0RSMlhoNgpIcUFpbTBXbHBhSHZwQUdQYnQzbnU0c1kyczRaT2E3T0tiSk5ZdkxOYXBWSU5Bb0RRWkNXb2k5R25QcUQvemswClNKRnluNGRWNzNZRWIwK1BoWEFrZnNlNVVKWkNOTnlMazZkVWtYbHBaSTZOZm9EdGlmR01HWWFnTXJ6dVVpYk0KcS9MM2NlUkJBb0dCQU5vbThvY292Z2ZzMjNTcEZOUm9NWDNpR1Mxd21jQ0NETjBxSGUrK1FnbWJhQ1dkaUY4YQphQVRndE1pZTJWQXdqSWlYVnpOQmQ3WTZJd1QycUVWV1R2UGhWbTNOSHZxeDBEK3YraEhRSllCcVUwOEdrUFRVCjhob2VTZE1HcXJSbzdjVFZMV25SV2tkcnhFNTM4L3JpbXdLdHF1aFV2S2YramFqM3dEdnUzZFN4QW9HQkFQLzAKT0NFdHI3YzYvcVVYNWtlb29OQUhXdzg5TnNZZXBETVl0dG1TcDVBZVE2RzBLcW5mL1QyWmhNTkNxeXl5UTFmRAo2Y2p2bG0rWW44THNZdXV0aFVjbUFMajd0eFYvWkd4UjhmV0ZTdk1yL3c2WURKaFVXcDhFWjdQRmVwZVdGK25uCndGRkF4dWY5dU5vaXNEL05CcExSUHg2dGFHektMVGhaU0VMakN5bmJBb0dBRDF5a3dYM04rL0xpOVZFZXhXSmMKOGRkbEhIME1ackVCeE9VOVhHK1NhT2pIcWJaeEx2bEdEK25lOFMyMmNkNHBWMGtJKy9RRlFSRFEvSDErRmZ2Zwo3VzJWejMrZFNkd1JwUnA0U3A3VXRUbEhpbzRVMFJqWnY1c1lhY0xUYkliakQzUlBrVjhMczNIVVRnNUdZUWxxCkR3TTV3TWlPekdteGdnK0lPdkEwTU5FQ2dZRUF5N25UdzNUZDIvWTFJYXM0TytsWXRyeGtHbWthNCs4WHV5UDgKeG9rWW5ubTRVMGxZZkFZeFI0cWVSZDBXNm1pcGVYNFM0MER3ZUxyK3p1UGdpTDZBeXZUUXRteUVlYlFBZHNkeQowMzNZL2wwU2tzY3JuMFBsTFpVUUJlTTFoTnFQQmpyVXROZmVlbUZWZFNzUEpubEd0aTJmRkFmcWlrMFNXVHVYCmJNWFM2T2tDZ1lBd2VkSFZDQ0MyV3pHUkRtWVJheUFvMlFkNGJmWXFsSlA2VElpdGVlQWpFRldoMXZoWjlmdm4KR3pORmRCOEsvb0RpNzNIaDFEbWNTSkkzU24zTm52cFcvOVhnQTJZdXhDZnp6RDZNejFkWTBQUlFoWkg4MTNoYwpjaWNwTTZOcHBlVmJGeXZjQk5FMFNnZzhHMmNRMUh1S3lRV3hrdmw1L25HeElCNkQzaDNSYUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  # Docker registry needs this file to end with .crt
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiVENDQWxXZ0F3SUJBZ0lRWTZyQVdvWEFFMC9iRE5pRE9KNm4zakFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRBNU1UWXdPREk0TkRWYUZ3MHlNakE1TVRZdwpPREk0TkRWYU1CY3hGVEFUQmdOVkJBTVRERkpGVEVWQlUwVXRUa0ZOUlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5vYzZJaVZhWWkvK0ZSYlMvNE1raEFscW0rTUdabFJZM0dRMFpFeFFGcUUKL2t4SDJkMUpyYmppOEk0VzJnTEhlTjBMdWJNOGhpS1R6REcrUjhGaUdnUHdPcjA1YVlmbG5kNlkybEhVemhRMgpMem11THBCeFNaRzZwQ0RaWG1JS2gxRVFtUG5pM0JMVmxRcExnOEF4aEtEcnYzMXBrZ2JBUEk4d1ExMVIrNFNHCmRLVjN5bDEzUXhlQ0VmaG84MEppOXVZWnBzSHYzMndpcTVaMmtwWlN4ZXZUSWkrS3dFaHZSSDN4c1QyRlh2WnYKRW9aQ0xUalVSNVVUdGQ1RjZBVGNMS3h3MTB2dW95TW94RmJUREZ6ZzJ5MTNUNzJhR0g2RklvZFRQdk5OL3dxcwpZZ1BQZ3lMajhDQVFOWW5LaGFyVitGVm9QM3l3Nm02K1E2aWhTZlZ3VEdzQ0F3RUFBYU9CdFRDQnNqQU9CZ05WCkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWQKRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVVwMVMzWlF2YTlQMGxQMUNJMisvTmZjdWtXZ3dVZ1lEVlIwUgpCRXN3U1lKSGNtVm5hWE4wY25rdWMzUmhaMmx1Wnkxc1lYVnphR2x1YTJFdGMyVnNaaTFvYjNOMFpXUXRkaTFpCmRXbHNkR2x1TFRVME9URXVjM1pqTG1Oc2RYTjBaWEl1Ykc5allXd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUxyanRFbkUvZDhjcktxTmhuUkVBdzNkYWRMbVA4ZnQyOEtkcWdSMmh1ZGpPd0FSc1NmRUlQYkliUlhGY3dUTgpwUTZOa0FTR1RJaDk1R0U0NHlHY2RkSkpUOFVzM0RFWVJlekpxNnRmRWFwZFd1ZUl4ZEpyY1dBbm5LdHZOSC9SCjlYT3Z1VWtkalBSZ2FQODBzN2NNTm1lZTBPNktiQm93KzVlSjBLdUFOT0thN0hQdGxGeW84ZVpXN3lSMzFVTUMKTUx3VDRjN1dMQ2lRdXl0Q2k3T291b2pOKzJ0bklCcUMxUG5ERHlLb1p0cVh1RE5RSjVSNTlCKzBYdFhwTCt0KwoweFljRjc2aStqbW5yT0sySE5wTndJT2hpVU50UDhibmprOUtoRG5PWWJURWprYWtjd0VPMFdNcFNHNndhUWhJCjNWQXpGdUVlZks5Y2ZzMXc4eFFTYVBrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  # Docker daemon needs this file to end with .cert
  tls.cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiVENDQWxXZ0F3SUJBZ0lRWTZyQVdvWEFFMC9iRE5pRE9KNm4zakFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRBNU1UWXdPREk0TkRWYUZ3MHlNakE1TVRZdwpPREk0TkRWYU1CY3hGVEFUQmdOVkJBTVRERkpGVEVWQlUwVXRUa0ZOUlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5vYzZJaVZhWWkvK0ZSYlMvNE1raEFscW0rTUdabFJZM0dRMFpFeFFGcUUKL2t4SDJkMUpyYmppOEk0VzJnTEhlTjBMdWJNOGhpS1R6REcrUjhGaUdnUHdPcjA1YVlmbG5kNlkybEhVemhRMgpMem11THBCeFNaRzZwQ0RaWG1JS2gxRVFtUG5pM0JMVmxRcExnOEF4aEtEcnYzMXBrZ2JBUEk4d1ExMVIrNFNHCmRLVjN5bDEzUXhlQ0VmaG84MEppOXVZWnBzSHYzMndpcTVaMmtwWlN4ZXZUSWkrS3dFaHZSSDN4c1QyRlh2WnYKRW9aQ0xUalVSNVVUdGQ1RjZBVGNMS3h3MTB2dW95TW94RmJUREZ6ZzJ5MTNUNzJhR0g2RklvZFRQdk5OL3dxcwpZZ1BQZ3lMajhDQVFOWW5LaGFyVitGVm9QM3l3Nm02K1E2aWhTZlZ3VEdzQ0F3RUFBYU9CdFRDQnNqQU9CZ05WCkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWQKRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVVwMVMzWlF2YTlQMGxQMUNJMisvTmZjdWtXZ3dVZ1lEVlIwUgpCRXN3U1lKSGNtVm5hWE4wY25rdWMzUmhaMmx1Wnkxc1lYVnphR2x1YTJFdGMyVnNaaTFvYjNOMFpXUXRkaTFpCmRXbHNkR2x1TFRVME9URXVjM1pqTG1Oc2RYTjBaWEl1Ykc5allXd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUxyanRFbkUvZDhjcktxTmhuUkVBdzNkYWRMbVA4ZnQyOEtkcWdSMmh1ZGpPd0FSc1NmRUlQYkliUlhGY3dUTgpwUTZOa0FTR1RJaDk1R0U0NHlHY2RkSkpUOFVzM0RFWVJlekpxNnRmRWFwZFd1ZUl4ZEpyY1dBbm5LdHZOSC9SCjlYT3Z1VWtkalBSZ2FQODBzN2NNTm1lZTBPNktiQm93KzVlSjBLdUFOT0thN0hQdGxGeW84ZVpXN3lSMzFVTUMKTUx3VDRjN1dMQ2lRdXl0Q2k3T291b2pOKzJ0bklCcUMxUG5ERHlLb1p0cVh1RE5RSjVSNTlCKzBYdFhwTCt0KwoweFljRjc2aStqbW5yT0sySE5wTndJT2hpVU50UDhibmprOUtoRG5PWWJURWprYWtjd0VPMFdNcFNHNndhUWhJCjNWQXpGdUVlZks5Y2ZzMXc4eFFTYVBrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: gitpod/templates/db-password-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: Secret
metadata:
  name: db-password
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
type: Opaque
data:
  mysql-root-password: "dGVzdA=="
---
# Source: gitpod/templates/image-builder-mk3-authkey-secret.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: image-builder-mk3-authkey
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
type: Opaque
data:
  keyfile: eHlFalJTcUlOQzY1MGNrWkQ5eGtpVksxMGNKR0t1VXU=
---
# Source: gitpod/templates/messagebus-erlang-cookie.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: messagebus-erlang-cookie
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
type: Opaque
stringData:
  rabbitmq-erlang-cookie: HJNofYFqS928DsbTxL3n
---
# Source: gitpod/templates/messagebus-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: messagebus-certificates-secret-core
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
type: Opaque
data:
  ca.crt:  "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZkVENDQTEyZ0F3SUJBZ0lVRko4ZlFiMHdqUGpFRkdPQ2VWUHljVEtuVmdBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NqRUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeEZUQVRCZ05WQkFvTQpERlI1Y0dWR2IzZ2dSMjFpU0RFUE1BMEdBMVVFQ3d3R1IybDBjRzlrTUI0WERURTVNRFV5T0RBNU5UZzBORm9YCkRUSTVNRFV5TlRBNU5UZzBORm93U2pFTE1Ba0dBMVVFQmhNQ1FWVXhFekFSQmdOVkJBZ01DbE52YldVdFUzUmgKZEdVeEZUQVRCZ05WQkFvTURGUjVjR1ZHYjNnZ1IyMWlTREVQTUEwR0ExVUVDd3dHUjJsMGNHOWtNSUlDSWpBTgpCZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFzbzBWY05vcE5jZXdtQjdZZGdJS0VoTHo4a3BmCldaMyttNUVndmlZS2tmKzQ1dDYreWg1cERKRHprT2Y1QWN6UHZKRTRYdlFoK0w1a0puNnBLaXpMYkYzVTdHSDcKVXJld2FTS3FGRnM0S2xjYkFJMHBtbnFLbHdKQzR3ZzI0MVVyQ2VzbUpEWHk2Q25vZzlhOHVvbUd2Y3N3dWRRZQpUNlhMSURNNFFyYUhUVWo1WUdwc0lwVUY1bm1ma2VjL3NDcHU5TGNVWlVwMy84TXBVSjlDZmxqSHpVakR0aWxuCjdBaUhVb0FGVDlDVUJQbWpiTURQODBpK2VIc2FLTFovWlVsWUJhbXJmcHl6UVIvUU5iQjA2dVRTUWV2emVGMUsKQWg0VXgxK0NVb0huKzdId2gxaFhCR3BUNHowWm1RbWwwSXVYRm1hTGYvaTZJWWVhL0szSnhUNDlPM0hXQmVXdApORkxlc1FKdXFSZ01zaHAzbVB0ZEExam0xZVNxVmE4eTIrRGh2UVhVYk5nL3BJdEdMNnNNdUxoTDJaKzZaRUppCkZxM1J3djJFR0wwa0h6a3dCbGhxUUVlbGZpWENsOElmR1VMU2tvVk9GU1hNanE0L2Vwamh1bnBRNTlWeXZZQlgKYURmMnQwdFRZa2RqTk1RaDh2RDJoMGp4dmVncE02VmxPSUJtTFRzZ0dzeERpTk1mWURhMjErWFBXTDJXQ2wvOApNL1AzZEhsKzU4UFl5eGhPL1Uwa2RBMW81ck1YT1NtMzVPTjBzMWtDY1FyTFg1eHY4OVJ1STB6L2lLZXVyTmFJCnVDN21Tb3lISGo3YVVENEUrdVVOa3Q4WTdHbnAxWW1hWjEreVZ6QkpQSCtweTN3ekd5aGtpYjlIcUhhSWxqNy8KaTZHTUorRlhjQUpEdXpjQ0F3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZGT2huNWFWZ2crV014YTBhM2owVDYvdQoyeUk1TUI4R0ExVWRJd1FZTUJhQUZGT2huNWFWZ2crV014YTBhM2owVDYvdTJ5STVNQThHQTFVZEV3RUIvd1FGCk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUYveG5qVTg4TzdBVFpMblY1Q1IvVWZiL1pWaE1mMzYKQXVGL1MrSktMWkZ2WGlabm1oMjlEa1EyNU5SWTN1V1JlT2RKMVZFN0tjeE9sZ2t1LysyZWt4ek5qTDlVNWZnegpRbVpQbFNTS05ZVHdCKy9PQXNYbG9YdTM3OFIzUSs0RENtTk5zazF5K3N2R2hIbkJNYjdLdHZUSXZlZjI0bTJvCnlRaUdPVGxWUmlRbTQ1VUNnQUNwek5xTllXalViQXlVM0d6dkF2b1RUbTJCN1VFbENncGdVQ2lXYWhTY013ZVgKSm9sSjY5UHkzcXdrcnZjOWZmZWd0dnk2clhSZkZTZ3k3QWw2NVJvNEVBOFVXNlRjSUdoV1RuWkJMQWFRSHVjNgo2T01BQ21yalN4SDAwcnhiUmdzcy9teHBqT2hNYmk1eExwblNrY0FWcDRmR3dRbUFQY0NzMHF3bUhjVEVyK0JsCkM5ZDNTUkxBZlB0c2hscGV4Vzl0MnEyZmVqVFFVVnJHY1ppSmlabnJyOVJ1Z2VMUlgveWxKOERDVklsQjJBREIKMTllRDArcGw2Ri9sQ09uUXJpazJlRjNVU01GY0tiNXlxYkZ3clN2b2E4QlZyc0pVdFdTS2RRWlhaZnBvSzZDbApoWGlvMkxKL3U1RE42R29HU1BXbk5nVHJoVHV2WGJlUk8yeG1KMHB4NERnck9jcENMdk5wdVRXRmVsdW9rR3pECmcwelMvNjNNZW1JWHVEemFxZ3ZONkZqQ1NNMnhYWExxNUJROHFDeWxpZE5EUTBSeko0ekd1cVp5RW0ydzNSRTEKWFgwQzQ1NzFUemJsUkZzbGdFV3B5a0pWcmFsTXVBc2tEVVR3U2xEZjRwTitWMmFzODVSY290YWs5dkF2d25rWgpCbWl5bDdVWGpzRE8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZNekNDQXhzQ0ZHamhiNWlQMWJNSWNtdCtBSWU4L0tzL2c5OTVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Fb3gKQ3pBSkJnTlZCQVlUQWtGVk1STXdFUVlEVlFRSURBcFRiMjFsTFZOMFlYUmxNUlV3RXdZRFZRUUtEQXhVZVhCbApSbTk0SUVkdFlrZ3hEekFOQmdOVkJBc01Ca2RwZEhCdlpEQWVGdzB4T1RBMU1qZ3hNVEV6TkRGYUZ3MHlPVEExCk1qVXhNVEV6TkRGYU1HSXhDekFKQmdOVkJBWVRBa0ZWTVJNd0VRWURWUVFJREFwVGIyMWxMVk4wWVhSbE1SVXcKRXdZRFZRUUtEQXhVZVhCbFJtOTRJRWR0WWtneER6QU5CZ05WQkFzTUJrZHBkSEJ2WkRFV01CUUdBMVVFQXd3TgpiWE5uWW5WekxXTnNhV1Z1ZERDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT3BUCkxDY0dTb1JDRDk1TkV2RDlhZDAxRzQzbXdMemZkdkUrNVVrN04xcEV1L2JLaFFINUlwRHh6VkVhTDZEdnNHYWoKeUFzZ2ppT3ZUTTFTOTFOMGU3d2c2WS9oZmZXWksvOWd0ejBwTXI3MHo2QllKSXFQeldHWDVscjUxV0NlVWNVUgpjV0dNVWIxcmRwbVF0WFFhbU5jWFpFTGxzNzBsRGZSUEd4L3BhVU5pcjhaVU5hUjIraDN5RVpSYUI2dE9yRGE4ClpnemFjakZEcEZvMTRBeGlBOGhFZUlFdFpnbUI0TzhTZTZWSk92U3lPL3lnWmVlNEhuYU5vT2x5eEEzdXNFdUcKQUgvaHY4aWpyeGRBbkd4Mm5QRDhpZWxrUTFjbnl5dE83YzI5WXZiS1BWV2tQZUczd3VMSXh0b1Baam9SYVVidwpvb2w2Ui9VUU9UdmlGQmQzbDNOQ21UQkZJZ3ZqS3BPbnA4WDZVazZwdmVEVHZ0WFprZFNsaFVqeXd5cDJrV2pvCkYyTGFKYXhuak1sYktBUHNvOHljaGQyTE1WSHF0T0swS29SdVNvK0Q1TElUbUF4VTY0RFVCVzcrRXA3RGFxM2UKU2cwUm1HUWtxNk5WYjlCZ1hRbjV0b1NoV3JGTzk3QmxvSVFUQVpvQ2dhcjlrRTlvNDc4eXJJejZDWlpXOENRcgo0YUhvT0J3SjlIUkRKY0NrVnU5di9EWm5jRUZxaGNmMVpDeURGemhZaFRzekIzVjRLMDlqellzZzQzeU1UUEdiClUzbWxBZVIrVy9vazRmZmZFa2JCYXdZclI5NU5WNXpzbGVFN2E1Z1poQzRJd1p2c1RyWnJkUjYwM21DRVJmbzYKU1ZxRmJRdks1dG8ydHhST3daZEZEa1JmbFFEMUZHWTRrVmxoZXNwTEFnTUJBQUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dJQkFEdEMxOHNQaFpQVzRDSjB3Mkx1K1N2b0tnN0hxZ1RKNVNaMWFJYVpUK21JR2NoZ0hMU05wN3BhCkNaUFU0YTArMGxwd0l3M3F5NUV2YnpucGYxcitrUVJLK1UwQkw0KzE3SGh4cmZCNDFIcU5meXUwY1UwR0dqMy8KV29xSXJCN0I4eXhZOEpES0pPREs1UllFa0dqYWRwZGNKMytTVDErMXNMMEtITVBLMlBjVXpTbGxWNVVuOU1vNAoxOGhyZm5IVlNsMnZ3RnZSeVgzTHZ4ZzdCdTRUWnJLelZ4NVZQK29IdmFJRXRFMW9SNkM0RlpteStHZDJZRnZ0CmcxRVNVVjZ4a20xWHhQeElhclc5bytzVk9ESG8zbnp3MGhEcDZXVCsxbCt3bVpKR09IenhWVHZFU29VMFo1ZDgKdWdtelNyVGFlaW9BMTF0eERrN0N5RmJoQTJPek1GR0p2eGN6cUkzMHZ3WVVDK3YrbVZCcWw4WFBjR24wNyt1KwpRTnBMZWJRWmszTDRsQ2ZPT0lYQVNxK2FvYURBdnV6eW5OSU1ueXAvL0dKU05tczdhNTRtcnB5T2pEdjNLNFYwCmlsQTB0eHlieXpkWWtGTFZNSlI0RHFzd3Fhakd0eGMzYjRUNzRjL1pUWVhSWkVkNTh1SmlWOUpMYjVNR01tc2MKWWFiN28wNlpORDAzeDgrRGN1MUFMZ2JhTFBWeTliM3lOKzk4UENhTkpWYWZwc05TSkN5VjZCM21uYTFuOHZXZApiK1FrRFNiUkh5ZGRjWnhBR0swTjdpeGRPN1hzNFNoeVZCZXpVQmJ2eDFna2d5YTZCWVoyZHVXbzR2OEpPamlHClQzM1ZWWkVUUFdZWHFyelhxQmpSYVQzRkxFWER6QmYzKzljaGxLYUpaaFNBRmtkcmgwVjIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBNmxNc0p3WktoRUlQM2swUzhQMXAzVFViamViQXZOOTI4VDdsU1RzM1drUzc5c3FGCkFma2lrUEhOVVJvdm9PK3dacVBJQ3lDT0k2OU16VkwzVTNSN3ZDRHBqK0Y5OVprci8yQzNQU2t5dnZUUG9GZ2sKaW8vTllaZm1Xdm5WWUo1UnhSRnhZWXhSdld0Mm1aQzFkQnFZMXhka1F1V3p2U1VOOUU4YkgrbHBRMkt2eGxRMQpwSGI2SGZJUmxGb0hxMDZzTnJ4bUROcHlNVU9rV2pYZ0RHSUR5RVI0Z1MxbUNZSGc3eEo3cFVrNjlMSTcvS0JsCjU3Z2VkbzJnNlhMRURlNndTNFlBZitHL3lLT3ZGMENjYkhhYzhQeUo2V1JEVnlmTEswN3R6YjFpOXNvOVZhUTkKNGJmQzRzakcyZzltT2hGcFJ2Q2lpWHBIOVJBNU8rSVVGM2VYYzBLWk1FVWlDK01xazZlbnhmcFNUcW05NE5PKwoxZG1SMUtXRlNQTERLbmFSYU9nWFl0b2xyR2VNeVZzb0EreWp6SnlGM1lzeFVlcTA0clFxaEc1S2o0UGtzaE9ZCkRGVHJnTlFGYnY0U25zTnFyZDVLRFJHWVpDU3JvMVZ2MEdCZENmbTJoS0Zhc1U3M3NHV2doQk1CbWdLQnF2MlEKVDJqanZ6S3NqUG9KbGxid0pDdmhvZWc0SEFuMGRFTWx3S1JXNzIvOE5tZHdRV3FGeC9Wa0xJTVhPRmlGT3pNSApkWGdyVDJQTml5RGpmSXhNOFp0VGVhVUI1SDViK2lUaDk5OFNSc0ZyQml0SDNrMVhuT3lWNFR0cm1CbUVMZ2pCCm0reE90bXQxSHJUZVlJUkYranBKV29WdEM4cm0yamEzRkU3QmwwVU9SRitWQVBVVVpqaVJXV0Y2eWtzQ0F3RUEKQVFLQ0FnRUF0QnBoWVUxUWtQOUZ1eE42YjRnWGlsSjdiMEhnK2txMzNReitwcDdCR0x5anpEZzBxeU9XRWRvSQplVUdyUWdONGppdHNZa0VQZnhZSjdmYks2bllwZEp2SGFUTmo0UlZ0MzhleWoydk8rVDZwSnhFWVpQZktZQ3lrCmZXQnhST1hxNjVGUW1DMkYxaFYyL3VsZXpuSnk3eituYkZPcEpzUUlTYk5Ub2QrQmJLMjVkTExjMkNBcWRrSE0KaVQzNWp3M1ZCKzBlY3RxajBvR3ZIVGN6a2REMEgwV2hhWWcvV1NkZWYrS3c3b1d1cnMwZmxqaWltc3ZGZmxHMQpVRGxKdjN1cVBTSXQyQnpuajR0ZjFIdHd2MTBibTQ0L1lnZ1NTamJuemMzSXNjM1M5dVRTNTdScGE4Z1dIc0U3Ck5mZUlGekd5dlRmUGRlTnEwMDA0OEhJQUIxbUFLVHFDdVdYSWRtWUMzcFJPSU5YZTVRY3N2M1N1S09UMFFhTjYKQU9zVXNvbTBOYmxJd1YyV3VnMTBZNGVWZ1ZTRDlvMFlyemdzK0Y1K2haZjBFd21qNllzRFdCQUVzaFQ5bXBnQgpVY3IvbmR4Mi9kc1pncDRQTGZtd3ZsUVkzdFRvYjYzVlRrUlJTYTBIVENPK09TQ09TaFhhVmFiM1VXMXNNME5oCnZpKytPMnFMc3pjNHlZQXdkYWFJWEo4RC90TVU5aHRzWnRYRWw0TFNDT1JSVzhrT25qaVZ1dDU4Rk9XRiszNW8KTTZ0eHE4V2RJOGxWUXpJcGdLUStsdEUwcDJwaWNVQ2o2SlAyRzVSUVhpV293cEZjRndDelk3MEtiNjhxejA5Qwppc21BdlNjTkE3cmdVZmhKZHhrRmRFY0pXTVlhbVZDdjFSb01yZExxV1IwUm5Cb1VCOEVDZ2dFQkFQbGNyNkc5CkdvanlJV3p5M3NSUTRrdkkySktNRGdTbG1sVDZEdUljUlZpZERQTWdaUnZ3c1BGdkVnUTBMRmdzckwyTERXZXgKU1FCM09yYks2WUU2eXkvaHZUME1qWFVrbCsvc3I5UW15enZjS1JkNE11MEJOYjlIeWZnV1BENDFVQlA1d0pCZAo0ZnZURTg1emhsdEliZEJpNDJZbmR2NUVUdlRHUW9keW1YenZHUlhrbmJPZ0E3NWZyaHRnZ0VWNjRTZHh6WFBMCkdLQndmZkt6Q1hES1FNTTkxWmV6R3ZzYmJYNWYzU0ltZmlQSkNiOWpMTHhkcDRVaEZTdnU3Y25WalJnMnRRTjUKNVJuTnVFOVNuVk1qSVhZQi8ybVYxR2pVN1U0TEdYZG5oaWRnZ1BBMzZLckRjcitoSEJ1N0JhSGY2RmJpYllJWQorUGV3T25LaXJkMHF2V01DZ2dFQkFQQ1FBM09DdVRaUVA0aWFVK056clM5VmxKamVPYTFnb3l2ME05YkVpK0hFCmQ3S3paNm9LVlpraFR6SVNKY3R5c3BRSUVOYzV4cUFySXVLQ3ZRZHB1YzJuZ0lVcVFLT2xhUGxzQmtXcHJCSXMKbFZCSk5yNGFxdDFXRU9zNmRmVGR6czNkekxLazRMd1liY2M5d2dTdzRxcDhFaUZnT1ZjWlUzL0NkcXpwTGw1VQpFOHJGbmUwd2grZThoV1FmbW5qbTNWbWYyR2M4dzhJcTIvL3FjWGViWVBpdnp1Tm1lRE4xRXVMekt3VEtGdWgxCnRZaHNQZjJKTlA3dEQzWHB0SkNWS0R2VWE0cjVsTGxza1FNZGlMQm4rSjNpdUp4MHkrcXhSVUNJWnN3c3JpRHEKWVJRTjdHNzJzQVh4aU1mVTdPbDhHbjVSRFZ0a1NiSEVkOWlwWFFJL3Ava0NnZ0VBWXRZUjV4R0ZDdkt0dlBrbQp3cmtzZU0xS3lnc3BJejVnUlg0M2wvZU1wT3JhenlMdjhIc2VKeFBYR0VOMXNCMUUrbnU2L0hhUWNOYlJOdEtHCmF1cGF6c2V5c2hmZm1hYS9jaUZtTDdpUXBWRkdHRDlVTUF4aXVVWkREMG9BNXNkS3ppQVg2eURMQ1gxSVJIUVYKdE9pb1hnaFVDWkZxNEsxQ2ZsSjIzQ2pZSFdUSGxKM2d3K21Ra2t4cVBmK3AxK0EwamVYVmdTZm13dkRUZXZicgpyd0Q3V21lUDJXanNNTXRXUXRqTVZWVGNlbUtjc25ja3JDU1MyWG1iWXFaNUtaNnpKZjNKRVcrbkZ1c3JPb1dNClJmK09xNjl2QlBLV0ZsY1BGL2ZlU0MySVJ1TkJOL1Z4Q3Y0YzVVZCtWSjkwUkF6emtqeDlHeXU2d3JIZStNRHkKR005djhRS0NBUUIwYSs0UHFCTkVzdCtjbDd2RGwwY1lZbDJSQWZOOThnZm1ETUJOeno4M1d5TG16Q1orUjVRWAprT1JJQWpwaVZMY1NKemtuUUNIZGdDTFk1cGJmRUk3SWRha2dTVXVSSjBzL2NzVXlUNlFrQTRtYm1tTXc2NjBICmcxQ2ExdWNoUTN1RGJEVlZ1Nis3dUVMZ3F3WEx5V05aU01ScGZLMGpkdkZQSW1qVzA5OEo3YnpLWkl0Q3NEc0YKcnRvTGs3UHBrU2xNNTZ3T2duem02bUVnWUhEYmhzb09jTjg2ZEd2MTAxSDVuZCtTNk03Zlg2QWtUdVpOWG1yVQplUndEWDhCd1BJK0ZMUStDNmJqTmFEcGgvSmdiYjZZRm15VG5LeXRKQU5QWUlHdEhvdFArd0ErTmFoT2p2Q1dDCkt0dWNnbkxKcUxNVnNObzdBYlVjb0UyMEFIc3Z6R2paQW9JQkFEaE52aUJlWmZNSUZuWjVvMzF3YVdsM0phQjMKTzFZcStiVXM0cmJjMnRvaVVGVTdyZTZuV211b202RzUwQmdBTmpnNzlwZGt2Q1ZUUkNYRi8wR3VDd081TVd5OQpNR2VuRHB3NllCc29Fa3Z4ZC9yc1hlN0kvNVFDV3lod0VSRFZtV0RONlZWdXJEbDNDVXJyVGIxNEd3dldaRktLCnd0Rzl4am9vZlJOc1U0Y09tQk1JdnhNK25UaTFKaFBrQXVlUk8wank0a2hEdkFPM0FIdGd2NWp2d0VOZXg1Qk8KN3l0T0FNcDkxeVVmQjB6bis5dXU5b1l0dDlIYmZxelJ2UmhSK3Y3bU90eGRtU1krM1FLbzFDdnlLSHZwYVB0VwpJRGNraUpFUmw1cjlldkhHd0dFWW8zQkl4aGxkTThsd3NFWFJHaTNDRjNUQnpzZVR0ZERaSGRCeHhmTT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: gitpod/templates/ws-daemon-tlssecret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: ws-daemon-tls
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: 0cc8def65bb31df76d0f7d75e737649389c65e950f665761c96d005f770951e0
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lRQTlTUGNxdVRDdWl5RVF5MU1GajBhVEFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRBNU1UWXdPREk0TkROYUZ3MHlNakE1TVRZdwpPREk0TkROYU1CWXhGREFTQmdOVkJBTVRDM2R6WkdGbGJXOXVMV05oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBdjN6Y1pvZkRxcmtyMFFKejdmUTdzdkVjUytVd0tieWFUbGJJcURsdUlEMi8KR3F1VkpCNUs5WGJtTGVZOVgxNS9ZZzlETzg5RFBYekNVZ0pEY0FhZUFjZkxINUZGbkNldFlUOFJqb24rTHo5MQpFcVJSYkgvVVdEeFFzZnpxNkt2cnAyQUU2TVE5S09TSVJENkxmV3Qyd0FYNGtQSE12Y08zSFVOZjRNMGZDUUxOCmNhK1hxd3h5bHkxbittVFFsMkpERGRSaDhkN09tWDJjNmc3RTdEVWVDYndMS205aHpKTVZLeTlXYkQvNnA2b1AKZTRqMUhlUDlzMzhBYzZtOEE2Z2ZiZ3JYMVp2M1FEMzErVDMxYno3R2hnak9NSWl6a1JhM29ZdEpRTkUxYmsxKwp2dFBvUUJxUlovU2VCbzdVY1c0Rk9rWFdvUys5Wm9BVGVLbEo2YUVFTlFJREFRQUJvMkV3WHpBT0JnTlZIUThCCkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIKL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkF1cDkxMWM3MTVFdmtwbWIveVNjaHVYaTlWOE1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUM2b2x3bmRHTVBCUlMzYUo0N3VPQkNkVnBPL1ZHM2lnRWViSVcwSmo5R2N2QjlNVmNYCkZFUHdNV0VkWTdNdStYNXp6ZVJUZzA0dEJqTUFBa1JMQWllNmhuVXZBaXJOL2U5L0dab3Z4SjV2ajlPMFpMcjAKem9heFlPQWZ1NFNoZkFKNFpnN0lxZ1BFakNDT1M2NkdJUTZOZVhlM2wvenVwcEZtdnVRTS9UQTNsalJQM29pQwowTHdYTjJPTmY5RWNwTkdOaWNOeGd5eG0rNVhmMnVpOUY5MHVJeXlhS29TOE0wNTRoYkJMVEVMbjhjKzd5Y3FpCnlQUE9iWGlZS3EwRERZeUk0RHVPb2RndS9MajhhNk9pNXBqN3lUMk5kd05QazU3YUl6bVRPNjR3ek1wM29qTncKMjN6bHA3a2p5bmI2ZlhmQ1M1Ky9ZSTFFQmJDS2c2Kzd0TVRaCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxVENDQXBHZ0F3SUJBZ0lSQU96NW9HcmZFRXQ2VUFzb0kxU1R2dkV3RFFZSktvWklodmNOQVFFTEJRQXcKRmpFVU1CSUdBMVVFQXhNTGQzTmtZV1Z0YjI0dFkyRXdIaGNOTWpFd09URTJNRGd5T0RRMFdoY05Nakl3T1RFMgpNRGd5T0RRMFdqQVhNUlV3RXdZRFZRUURFd3hTUlV4RlFWTkZMVTVCVFVVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEazd6MkhTZnJ2ZFNJaGJEbXZvdFVSMmlwNEJkaWM2YkZPNEdmVlRvb3MKT0I3WmNXaUphK3FIaVZONVRQZTRDOGFpMHlzUkdvN29nOTNrN0E3L2lZaUpSNndUSTNzMU9mREx4MzZLdndOdApqVUFaZ2JwZHFLd1J1ejZoTk0wQlpuYlFLWUNaNmZjWSsyeVczampCeGFyMkJMSmNtb2wvZmVTQWVqQTBXTm00CkF2eDF5WVVtdUxLYWZIbzBUeXBIRkdSWVhmeWt0NDVOaTdmOGd1b2o4czJuSXVqSUN0cG1HanpNUXZIdGlmV2MKdHlxaDRncmszdGUzK3czcTJCT2xoTUhudnNPcUdKby9pWmtkazBsaFd5bVdsSlprL0Zlb1pTQkFlV0toZXRtZgpTVlBSQ1RxYlM5MWdqYk1za1NCREVRN29MclE3VUFlcy9UTlIxdWVzc3pSWkFnTUJBQUdqZ2ZBd2dlMHdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlYKSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZBdXA5MTFjNzE1RXZrcG1iL3lTY2h1WGk5VjhNSUdNQmdOVgpIUkVFZ1lRd2dZR0NPVkpGVEVWQlUwVXRUa0ZOUlM1emRHRm5hVzVuTFd4aGRYTm9hVzVyWVMxelpXeG1MV2h2CmMzUmxaQzEyTFdKMWFXeDBhVzR0TlRRNU1ZSTZkM010WkdGbGJXOXVMbk4wWVdkcGJtY3RiR0YxYzJocGJtdGgKTFhObGJHWXRhRzl6ZEdWa0xYWXRZblZwYkhScGJpMDFORGt4TG5OMlk0SUlkM05rWVdWdGIyNHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUVvdVZDM01kRTlxcmdWT20xMXRwd1F5RHBSU296SEpmOUgybVlYdndiSUtrcU5JCnc0L3h4TXd1aGQxNHJiY1lWa3dxZHVUSEN6K29KdzZEaXZPMm5CNmtOOWJhNmxwRlZZSkRBaWlzcCtYZzVaYkIKUkw5K082Z0hOek54ekU5Mk9rZmdlTGhMS1lqeldRNk4vZVpub1JLclhnQzFuS2FnZmhaMmRSaGp4U2ExeWhGVApqRzg3TmU0NXF1Uy9rWVp1ek9wbm5QMC8wUmF5OTFDYzgrdXJPNWMrRjJCQU9wQ1M0SnIwMnAxWVAwQkROYXFnClRySUxFenp1UkhqOHRLNWc2M29OcnZJV2lkTzA0S24yd3k1aERwNXZXaGlGTW9zNy81cnBDR09ya0ZQTXZpVmwKZFMzVFg0Y2VnLytCUFhBRm1jQVYyVndjUGdySHN3blI2NGhkQkZZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNU84OWgwbjY3M1VpSVd3NXI2TFZFZG9xZUFYWW5PbXhUdUJuMVU2S0xEZ2UyWEZvCmlXdnFoNGxUZVV6M3VBdkdvdE1yRVJxTzZJUGQ1T3dPLzRtSWlVZXNFeU43TlRud3k4ZCtpcjhEYlkxQUdZRzYKWGFpc0VicytvVFROQVdaMjBDbUFtZW4zR1B0c2x0NDR3Y1dxOWdTeVhKcUpmMzNrZ0hvd05Galp1QUw4ZGNtRgpKcml5bW54Nk5FOHFSeFJrV0YzOHBMZU9UWXUzL0lMcUkvTE5weUxveUFyYVpobzh6RUx4N1luMW5MY3FvZUlLCjVON1h0L3NONnRnVHBZVEI1NzdEcWhpYVA0bVpIWk5KWVZzcGxwU1daUHhYcUdVZ1FIbGlvWHJabjBsVDBRazYKbTB2ZFlJMnpMSkVnUXhFTzZDNjBPMUFIclAwelVkYm5yTE0wV1FJREFRQUJBb0lCQUgrcmU2Q3EvU24xSktlRwo5MVNmZGp1U2N3U2tIZnpEeG9HNlc2MTFNMUVkcXZhUWJEL1cwdC9yRVlZZ0NqVzFPMzBxVG1ZbmJYTDF0eFVuCkgrWWFDTzZsN2F4dXFSTXgwTHVUOFZubTFENlAreU0rV1hSSjBFdkRKRlk2WCtsYi92NXZacXh1OGNJWTFLSCsKSTZETVgxNzdsNHhWRWtEck1EY0Y3VVFFR01hb3RhRnFZbnF6bENnRlJGZWQxNFdySGFPdzhGa1RhOHdlZjFuNQp2RHFhMVFWZS8zVGljTUpWR28vM0tMMnNUOU5PQVhHS0ZnUUxXekd5NWliRXN3U3BFbDU3R1l6NVF5eFBBQ3pBCjN1b1JZd2wyWExFQXlOclp5VW8xaFlXUXFXczNiemxQQktBVDlmNkRVQzdlUUc4RU1xNTdFRjRTakQ2N1d3SlAKczRzb045RUNnWUVBOU5pM2NFNDFkVmgyTmE2dFBIYTdoNlBFYVQwRHdCRGk1M2o1amRVZkM3NE1zTWdiSmszUwo5c2tEWVZ2dE1aTFM1TzVHTm03TTlqbjNlVnVDYjM5UnNrTjBINXVqVE81Z3FjNWZGbnBmbTRvRXdEYmVtYTZCClU1NWdIdWFkZDJZOUFyTU80bUtGSzVOUGxrZTVuTEFkTWFXZG9mR00raXRuMnkwTnNVUFNabmNDZ1lFQTcxejMKS0N1bno0cmNkbHdZT2czYkpvTmF0QWdwcThjeExudVNaUnBwaEJuNlhQVE15QmdnRWZLbVRUVXpxUEt1RkkreAphQ2dybTB6RmsrQXp6NStnN1NCMDhwNUlYRFlwMC9jeE5BZktINXhCa1VLcng3TnZLTjVLSVRmZGxrREdiRW9QCi9TdDJxU2VsdTN6OWd0MWRKTk8rVkJnbVZRYnNjSjZsSS9Rdlg2OENnWUFKczlESkZZQk96eHVZRXZ6d2FYQVMKOXUxZ2tqZGsxQVo1ejdScjUyY2Npd0pydXZKQWVWTUR6b0ZneVVqRDd5S0dTZDdrWjAyZDhEd2JSZ0lNTXdwawp1d0dPQXhmY2c1RzNDT09CdTRXd1h5N0RBeW1kQTJwQ2l3TWFGbDlsRE5zY0VVWmt1Q3k0eGxTZ0N1V1REUE9MCk5SbmpBZlJwTVhFaklVenFtbHByRHdLQmdRQ29LRDUyV1J6K1FBYWJuQjFsQTREM01JYVRQYnpRc2hLS0hrUDkKaFMybG9YNXl1WVAzK29MbE9QdTk5K2RBQktWcFNuMk90OUhTdTM5K1lKN2xlTFpjZ0ZYSWNJeFRRN1hrOUo3NwpkNUYyM1padWoxRVE3YXpsSUMwaDR4Wm56VC9ZcWJ0TDE3SDRLaU5UY1A3RVpmRmV3dWJPTzEwS2xOK2NTc2VuClY0L0Vmd0tCZ0hhZGRnNmhrMytjZXRnV0pmbGR5Q1JaN0RlRFFkRGRrbmNBYVlkaHV3WTVVNStvZGxmc0JrUjUKaHRta1NFbEpNU0VJTkRKbnRPUURreUtlaXhFVXorWldWdEY4Mk9hcHlTTzFTZHVKdFlyNFNJb0Y5SndobEZWUApIUWk3d0VDZmN2dFhaUXh2YTBzZWhJbFNKcEhyMzhleENPSWptWXl6QmZaL20vNjhwS0ZQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: gitpod/templates/ws-manager-tlssecret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.




apiVersion: v1
kind: Secret
metadata:
  name: "ws-manager-tls"
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: 55904b328f38e978c0f16b3a0e14cd8377a8e0457d56059362a9d7df634d6c37
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRQVZxK3VDMC9hbDVoYWYyWlMwMWd1ekFOQmdrcWhraUc5dzBCQVFzRkFEQVgKTVJVd0V3WURWUVFERXd4M2MyMWhibUZuWlhJdFkyRXdIaGNOTWpFd09URTJNRGd5T0RReldoY05Nakl3T1RFMgpNRGd5T0RReldqQVhNUlV3RXdZRFZRUURFd3gzYzIxaGJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZVA0ZWJXZE41aXJTNitjRXgxUCtxYitwcU5YZEhST1ZjZFJRVGR2amkKTG5pcGJiYzM1WGNSWGFyZXVTbm5GelRGbnc3SUNaUDZqZlBFR3N3ZDZvK3BPSHg3dVJOZGl1QzZmd0Vsa2w4OQpQNHNkK3VtNkIrQWp5S25DVzBBbjl3OFJLRS85c2JGWFJDd1RUd210RmxNaU9tNHgzaEpwL2EvZ21qaWloRlRBCkdKMTB6b09MVmk5eDJhVnJJSDUxOHpRVm5nK3p3cFZWdWNvK1BLRlpqZHRrMlRISTA0eXdPcHNvdVVYQm0wbGwKSXZ5eU1mTE9JY0RQck9tKytQcFErVko2TEJUTDBrOE56eVM4aDFVRGxCeHR0UFZ2NkRGVXVyeW9QRk4rR2x3dwoxUk5aVFRTVUNJN0p1UnNCZTc5STZtaG8zNm9ya3IrU01KVHRVVEFGVjRMQkFnTUJBQUdqWVRCZk1BNEdBMVVkCkR3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFQKQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVJCaUdPK0YxYlozWHpMK1BYbTNjRnFMdGU4c3dEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUlOK252anJZUXdSeDlEbVVuOTRyc1NWZ1pZUUpWWG43UXd2VnUrSTgyTXdsbTA3CjBvRVc2cXl3aFJqQTJXNk9VbmQ2NzNHcDlxNm5zOUg2cmxVck1kRzgyY0VoUWcwek9lL1VYT085TmNXNlVSSmsKWGdLU3BTZzUzTlpIc1lqM3VxTUluVlEzQUNhMzVQcmhvaUNNaEg0YkhjWVlaNDNxZlpEaGZVWE13cUV3N3U1SgpEQnMyWU1CWnVPZXlNZkR2UmVId3M0T0QvV0N4NGdmSG9VazlBZmZDMDAyM1dpMU4xcm8zTzJOeUxtbW9uYzJWCjhqNVVWeC9hU3Fhc01VM3I4aVhnaWdrV1hFTVd1VmVhdlFaTW00Zk5NLzZ1VnMybnVkYloyb05sdmVOM0JnRHIKaGN2ZGw5ZXZDZjFJSVdVK3JqY1JhanNzVE53ek9YQll1NWxFM2VFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2ekNDQXFlZ0F3SUJBZ0lSQUpwa0ZEM0s0cXRGbldVSmhjcC9hQ2d3RFFZSktvWklodmNOQVFFTEJRQXcKRnpFVk1CTUdBMVVFQXhNTWQzTnRZVzVoWjJWeUxXTmhNQjRYRFRJeE1Ea3hOakE0TWpnME0xb1hEVEl5TURreApOakE0TWpnME0xb3dGekVWTUJNR0ExVUVBeE1NVWtWTVJVRlRSUzFPUVUxRk1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXU0RExUcWQ5RUVYY0FYajBDRm43QnY4a1dhQVYzeE14UXhFSkkvZ0YKaEYxdFVNeW5vMFNiZ3FuVEVIazZ5Q3l3blg1Z0U3cDZuRWZ2RHp1bGRYc0hmeTJralFValdWZzlwR3VxKy9qRApoZFVaS1hUUENpenFLbWpJT2E4elpkL0pSNmJ6NWxaaDJrZ1dBVFhycnozNGxnWEVGVVdOcDF0MitoQitQd0l5Cmd5SDdnb25BeWx6WVZiLzZHR2s4ZzQvZUp5cndSV1ZxcHMyVTdFL1pDN09NNmN5Q2szN3BncE9NeTMrT0tSaWYKV2l2RU5oN0ZaZ09IMnR0T2Z5bkhFK0NJTnFSdW02RjBZVFZpQmtYaWZ4Z2o4Y0tCRjFJQjNXK1oza0pEZEZYRwpqbnhsTkNCR3JFZWtvaW8zWStWMnphSysxTTFzWmt4bHRaZlVBKzkwS21PRGFRSURBUUFCbzRJQkJEQ0NBUUF3CkRnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU0KQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRVFZaGp2aGRXMmQxOHkvajE1dDNCYWk3WHZMTUlHZgpCZ05WSFJFRWdaY3dnWlNDT1ZKRlRFVkJVMFV0VGtGTlJTNXpkR0ZuYVc1bkxXeGhkWE5vYVc1cllTMXpaV3htCkxXaHZjM1JsWkMxMkxXSjFhV3gwYVc0dE5UUTVNWUk3ZDNNdGJXRnVZV2RsY2k1emRHRm5hVzVuTFd4aGRYTm8KYVc1cllTMXpaV3htTFdodmMzUmxaQzEyTFdKMWFXeDBhVzR0TlRRNU1TNXpkbU9DQ25kekxXMWhibUZuWlhLQwpEbmR6TFcxaGJtRm5aWEl0WkdWMk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUc1NnBiaEwvNEZYOVB6T3ZLCjNwazdLRmNkaVE0VmE0ck5oaW0wWHpPTDFmaDk0eGRDdVhySkhVTVBST0gyZnNZcUtmTHNkbXBGa0I3dmdjWEYKdC83cXVuQ3ZkTkhWdUJyTjJUZE5EemQ4cWFwVXRwMVBJTWJCOW9zNzAvSWUrL0RWejRUNDQ0d010WDBUZkM3TgpGU2xGZXgzZjgzdmZOZUJ0TUVFR0c4bVdDYk1WcFhyR3dGZTU4UGRWMmRSYWVEd2JPUU1RY3BwRUxDeWVQaURyCjRTT3FiU2k4dWwzVzBucTZFeXlRR29RMkxPZWxBSEFsYUdFNkhoSWFKZ1hBUUhzUEhqTDNSRlBiMk9qZ2lWQnUKMnJHSjZZL0YxbEtiTXdjeHBvZkJ3Q29VQnZjZWRqMmY2TkV1V3Zsbm8zdnFUSHAydW5sN1JBMUtEMEtleWNXeApsYkg1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdTRETFRxZDlFRVhjQVhqMENGbjdCdjhrV2FBVjN4TXhReEVKSS9nRmhGMXRVTXluCm8wU2JncW5URUhrNnlDeXduWDVnRTdwNm5FZnZEenVsZFhzSGZ5MmtqUVVqV1ZnOXBHdXErL2pEaGRVWktYVFAKQ2l6cUttaklPYTh6WmQvSlI2Yno1bFpoMmtnV0FUWHJyejM0bGdYRUZVV05wMXQyK2hCK1B3SXlneUg3Z29uQQp5bHpZVmIvNkdHazhnNC9lSnlyd1JXVnFwczJVN0UvWkM3T002Y3lDazM3cGdwT015MytPS1JpZldpdkVOaDdGClpnT0gydHRPZnluSEUrQ0lOcVJ1bTZGMFlUVmlCa1hpZnhnajhjS0JGMUlCM1crWjNrSkRkRlhHam54bE5DQkcKckVla29pbzNZK1YyemFLKzFNMXNaa3hsdFpmVUErOTBLbU9EYVFJREFRQUJBb0lCQUhCNXZQdHNxeS9reUNtMQo5YVZBM0wyQXRieHh0RTBCaFU1MjNLWFA5UGRHMS9sZEdyNXN2R0J3SU9WRDQ0Z0tqdE9hNkdWTk9wbWU2UCtaClJ4S20vNE5CelBDdkFWcHAvV2d4RWZ0ZWFXTlJ4bXRBMzZWNTllb0V1djhuWXN5Y3BuQXQ3U2JoOElieE1RbisKMzJkYTVGQ1NHdUtydTJLR0VtUEZHd1lPK21BQUxRRTlFc2tjWk45T3IrTUt5Q3JkdUZQQW4wYVBCaklFRnpZSApWL24vamxQU1NlbHFiTTRQY2Ezd0Y5WVlnZi9SRkFpa1RYNXVxTzV0RVBuRGdpenF4WThleXV5SW02ZWR6OWdBCjNWSysrTE9wRXBCdzNVU0JvalpON1o4OU5NRE9wM2ZaUHRod1VRdVBwWkRKWGJ2bmgwbE1tZVU5K0Q5cFlDUmcKT0hpVEhzVUNnWUVBdzRDR3cwMWxLeUJsb29HZUd2Q3MxWkhhb1RIQWZBcU0zeTMyUUxzS3p0WTl6ZFhYbHNTLwpDM0pIRVd1Y1EyeVBhRlZpMVRqOHB3UlNhVHg0MVV1LzM3bUd2cEFxYU5nWGdPUjZMRkRveHUvKzFTaitWa203CmZ5VXJ4VEhvdmYwUnVWV3FoYjBWN3g2NW5oNGNWR2UzVnBvMnVFRzNuYU9UeWd3MXpvQTBuWnNDZ1lFQTlZYVoKU0llSFRVY2xaL2ZVSGJwQ0Y1VmR1c2dLTXdZRUo2UXgzMnBuUzk2SXRkbUtxQm9pUWlLMkpkR2pQMGZNbk5RcgpySW9EMUErdEdVampKckcyMHhwWlBQalB4OXRKWG5kMFU3NVNtK2FRMjdZbGVpU210OGFtcjNTUmRmUXZoY1BTClovY1NpL1pSTmZpQTY5SVVXOTdad1QwK0RidEh6NEdJYk5TczlVc0NnWUFSMjFGejBVUG1Wb1V4L0tqV1NSbGcKUUh3NXNQT2w0TWpSTWIrR1ZnODhxVERuOWhwRStSK0NDaVFYb1Q2YW9mWFBUODFCTUgxVE8vL1RBT1VBaG5TMgpHSm9JR2Q3bHlLY003TkdEN3JmMFE4T0E4TWVhVmcyOEpVY0VNZlRTTmFWQ3ltSlM2Tnh5Qk5wcmFOQ3BuUGVQCi8zSDBEbnlZOTNIdVNJTTVvMWdxOVFLQmdRQ3d0MW9vUy9Qa2VTckJOQzBsNEdPbG1jcEduNmhIcFRMa1hWZlEKR0VPVTVleThCb0c0RUdkTDlyUG5jSVh4Qy9xSGZtYVkzeFYyVW5vaVVzVzdtZm1lNDc0TEZvSm10THlRRTZaVQppQTNwVEFCRFEweWlKek1mM3drbUM5Nk9hVnl6Q0lpdWI3U1hySWd6TWxPSWFFSmpCWGp4anVUVStWRHNWNjBiCnQ4OXRGUUtCZ0RuMEFZMHVJbnpFOUlmNG5ibEZwVDJhQkhUMW5JWlpCM2Z5eENIa29IMmNibndMOEk0RThkRS8KU2tkSzgzTTFjWmdSZUg3aDdzSTE5VkpkSTVOK3pab2UwN2J3UjI5WnZTeHUwaVJwaFpsOWRqYzIrTkFrR2ZHVQozVEhRNW84cHQxM0FpRlJPZTN6dVNqc1RBTzBXV2VpOUJTblVTMGpSZlNoM0p2SXhKQlJ4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: gitpod/templates/ws-manager-tlssecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "ws-manager-client-tls"
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: f84ecbd9fb6bb630b8c66b2aa07041063c0cc04303b5edeefd9abc4e6e7249d5
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRQVZxK3VDMC9hbDVoYWYyWlMwMWd1ekFOQmdrcWhraUc5dzBCQVFzRkFEQVgKTVJVd0V3WURWUVFERXd4M2MyMWhibUZuWlhJdFkyRXdIaGNOTWpFd09URTJNRGd5T0RReldoY05Nakl3T1RFMgpNRGd5T0RReldqQVhNUlV3RXdZRFZRUURFd3gzYzIxaGJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZVA0ZWJXZE41aXJTNitjRXgxUCtxYitwcU5YZEhST1ZjZFJRVGR2amkKTG5pcGJiYzM1WGNSWGFyZXVTbm5GelRGbnc3SUNaUDZqZlBFR3N3ZDZvK3BPSHg3dVJOZGl1QzZmd0Vsa2w4OQpQNHNkK3VtNkIrQWp5S25DVzBBbjl3OFJLRS85c2JGWFJDd1RUd210RmxNaU9tNHgzaEpwL2EvZ21qaWloRlRBCkdKMTB6b09MVmk5eDJhVnJJSDUxOHpRVm5nK3p3cFZWdWNvK1BLRlpqZHRrMlRISTA0eXdPcHNvdVVYQm0wbGwKSXZ5eU1mTE9JY0RQck9tKytQcFErVko2TEJUTDBrOE56eVM4aDFVRGxCeHR0UFZ2NkRGVXVyeW9QRk4rR2x3dwoxUk5aVFRTVUNJN0p1UnNCZTc5STZtaG8zNm9ya3IrU01KVHRVVEFGVjRMQkFnTUJBQUdqWVRCZk1BNEdBMVVkCkR3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFQKQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVJCaUdPK0YxYlozWHpMK1BYbTNjRnFMdGU4c3dEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUlOK252anJZUXdSeDlEbVVuOTRyc1NWZ1pZUUpWWG43UXd2VnUrSTgyTXdsbTA3CjBvRVc2cXl3aFJqQTJXNk9VbmQ2NzNHcDlxNm5zOUg2cmxVck1kRzgyY0VoUWcwek9lL1VYT085TmNXNlVSSmsKWGdLU3BTZzUzTlpIc1lqM3VxTUluVlEzQUNhMzVQcmhvaUNNaEg0YkhjWVlaNDNxZlpEaGZVWE13cUV3N3U1SgpEQnMyWU1CWnVPZXlNZkR2UmVId3M0T0QvV0N4NGdmSG9VazlBZmZDMDAyM1dpMU4xcm8zTzJOeUxtbW9uYzJWCjhqNVVWeC9hU3Fhc01VM3I4aVhnaWdrV1hFTVd1VmVhdlFaTW00Zk5NLzZ1VnMybnVkYloyb05sdmVOM0JnRHIKaGN2ZGw5ZXZDZjFJSVdVK3JqY1JhanNzVE53ek9YQll1NWxFM2VFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURkVENDQWwyZ0F3SUJBZ0lRRDBldnJPVHZ6TDd0ang5eFI2UGk5akFOQmdrcWhraUc5dzBCQVFzRkFEQVgKTVJVd0V3WURWUVFERXd4M2MyMWhibUZuWlhJdFkyRXdIaGNOTWpFd09URTJNRGd5T0RReldoY05Nakl3T1RFMgpNRGd5T0RReldqQVhNUlV3RXdZRFZRUURFd3hTUlV4RlFWTkZMVTVCVFVVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFES0MyQTNjdWRBL1Fla2Z3bWV1aUFEcFlkUTFac1phL0g5cjkzK3hDRysKRlVDSDlkQ20zTVNjcEVVNGtDK0tja2NUUkdidmxZbk0zV3dyUmZ2N3FmRTFXQWtCUHhRNFlpN1BBRFRPckpkKwpsank1dWh5alNXbCtleHYzMzM1dDlUTEhFNm9SNjhOenJkcEE1Vk1reUVFTUE4NVVhSndmZ0VKbXhzekZvUnZ4CmQrQXJ2bVBRRk84ajgvZDNSdVQxRXpLRlFNUjVHR095cDduQnpzRmcxVncrbk1wWEpOMXJlM1g3NjF6ZS9ZL2QKUnRzSHVjdWxGZWF2MzVDb2N5ZUxVcHIwdG9pUG9RVzlvZ0ZscW9YR1N4T0FvcVhkeVR4NzlwejJnelV2ZkZGVgpiVi91T00vdUowS1dnSTdYQjZvQXF1Qm9hbWlpRFBUVmhoODdLQjJhYWFXeEFnTUJBQUdqZ2J3d2dia3dEZ1lEClZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlYKSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZFUVloanZoZFcyZDE4eS9qMTV0M0JhaTdYdkxNRmtHQTFVZApFUVJTTUZDQ0QzSmxaMmx6ZEhKNUxXWmhZMkZrWllJR2MyVnlkbVZ5Z2hGM2N5MXRZVzVoWjJWeUxXSnlhV1JuClpZSU1kM010YzJOb1pXUjFiR1Z5Z2doM2N5MXdjbTk0ZVlJS2QzTXRiV0Z1WVdkbGNqQU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBWWpQZlhyWFM2NlpHcHpJekJvWWtHYTAzRWp4TU10Y3lBNzQxRDNjZHl0VCtuV3J4MmFtdApRaVpZaytqd21WWDZXNlROUHRSbWZtTFNzQ1BTUlIvdDMvREhtUmJiRytHVjhreGpkWkxCM2x4bHk0c1RKaUxQCnRzT2o2NXZOMUlFRXNtaUgrN1RvaWQxbitDTkVNWEkzTmIxeHpwSnRia0x6bGkyaVVOOHp6b2xScHQydUo0TEgKU3ZwY2VQZ3hUZE8zV1hQY29wempJRFJOM2ZjMUdwRklXSWxadHVwZGF3VlNtcVZKRWs0MUN6cStTTVAzU1ZZYwpST3M5eG1WOVY0N0o4bzNSM3BtNGZtRENsV3FNNDBjcU5yYTdDdXZaWWlFS0duRWhXeHRQZFhzL1daZG5FUDdhCmtVNFhqMnpGM3E0akdHUzFzK25kV2E5ZWhBU1BLcWdEamc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeWd0Z04zTG5RUDBIcEg4Sm5yb2dBNldIVU5XYkdXdngvYS9kL3NRaHZoVkFoL1hRCnB0ekVuS1JGT0pBdmluSkhFMFJtNzVXSnpOMXNLMFg3KzZueE5WZ0pBVDhVT0dJdXp3QTB6cXlYZnBZOHVib2MKbzBscGZuc2I5OTkrYmZVeXh4T3FFZXZEYzYzYVFPVlRKTWhCREFQT1ZHaWNINEJDWnNiTXhhRWI4WGZnSzc1agowQlR2SS9QM2QwYms5Uk15aFVERWVSaGpzcWU1d2M3QllOVmNQcHpLVnlUZGEzdDErK3RjM3YyUDNVYmJCN25MCnBSWG1yOStRcUhNbmkxS2E5TGFJajZFRnZhSUJaYXFGeGtzVGdLS2wzY2s4ZS9hYzlvTTFMM3hSVlcxZjdqalAKN2lkQ2xvQ08xd2VxQUtyZ2FHcG9vZ3owMVlZZk95Z2RtbW1sc1FJREFRQUJBb0lCQVFDRHNINTZKYTZOTVY4MQozSWVNcVl3TVZHdXFTRS9iZGZ3NGVkU2NKWUpJdnRsY3hOL0dvc2FUd281TG04OGcwZk41bjIvb1lQTjhVQ1ljCjNuU3JSODBzRThGcXlvNkhZWmRZM0syT3QvZldUbDR1UUJ4Q1lhc2RBV2p0V3dLdzhNeXo3U0ZBcFFhejgzRDYKTTM3SnpxeDNCRlFMdUZOcVJOTUM0amk5NTVDckJXckROOWpLck51U3JZdU02bjhYYXE2WjVWWURISStpb2VaZgphSEhCdkZ4UlJwRlJodWpHZFRoOStkUEllZHhoK1ZLdys5R080d0ZXWno5RU0xUnQzcVpPQkNXOUdhWjNiUDdNCnFDaHpEQjZKeXV4cVZ3ckIxTlN3V2xCd1p3ZFV5MDhKaExyWEFrTmx6anV1dkc5a2FLWEh1a1c4d3dCeVFqME8KRDJyc25MY0JBb0dCQU56NHJxVGF1QkJqTjNiaEp0Z3R2M3BzY2hTS25XWmVTWHlxSDdSZ0FZK3V3VkVUTVNicQpZeGNMRHliSzVrb2l1bGplT0FQRDYzY0JUeURZZGM4UkZsMnhHZk5oVHN0RytFaFNLYXcwZGN5OTc0Uk90bnJWCmM4VWZINjRRYXBjRGsrT09GSFA3cGQrL1dBM2JqOEdCaWd1UWNUbmVZQzJHa2tYYndlN0NNc1laQW9HQkFPb1MKbklMWVJrWlhBd29Ub2IxclBTWXNsYnJKejdjU1Z0bGlTdWxlQ3ZpUXMvbk40eHc4Qk9NL3FzczRZQVhxWFFQdgpLdGVRci93SCtqRkZwMnpZdzNkRjVmYWU3RFIyeVR1dzlhTGVvd3VEZWQ4K2RTNFlocGQzL0MyMllxOE54c08yClRNQVV3VlJvb3QrWVY2RDFUN1ZGR0VvMzZYNDd2QkhaZkxZR0s5OVpBb0dCQU1BcXZLYTlWMGxaSDRrUThSa2IKWCtQMW41aGhtOVRFdHAvbHkwQ3dKV3R4RE1tWEtTMnd0SS83bkNlZVdIdXNpK1p4Q3NHcmhvQ3Q4TVNkdW9aagpVOUlURElCdDVYbytzL2toQ3dDcGRyQ2hsVVM0dDFWSGdEQ3ppbmR6NjE1OVRBV2ZNQVpWbU1GbXhBcjVJS0dtCktBazZpbDFMR05VK3JNSjRCTVhBdVNzeEFvR0FBZStSZDh1T0dUclMvWnhYOUJjVTlHSGVBeU4wSWxGMmdtbTcKc041a1BOWUZod1ZhNFhybGwzT0pXQkRwU21NN3piS0dxaTI2SnQxeUJrSkxOaTA4d0puRll4ckJYVlcyS0ZZNApVZGFCaHJEWnF5ejdEeHlJMEd2Zm5Ba3NHOEtEYUU3enA0c0Vaa3hQUElZb0ExN0QvLzNJUzZUV3U0S0c5YWJVCnp6U1IzRkVDZ1lFQXhIbHMvWkN0cjNiUmZnMWxOYm85NjNkVHpKR3pqYm5oWXA1MGp4WG9xd0JZS3ZrUFBaWlIKaU9TT0UwM2xKZitjTk5vanh2bGRRbjRIL0t2eTh2T1A1VnJpNGJhOE9aQjEyNTYyL3lzWHE4YVZMemlYSEFaLwpyb00rdzNXNzB6Y1dQWWt5QVRneU1LSk9EUVZ0aUhqcFhIcHE5c0xWRkVNVmxab3pMS2FUVHU4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gitpod/charts/docker-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-config
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    heritage: Helm
    release: RELEASE-NAME
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      headers:
        X-Content-Type-Options:
        - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
# Source: gitpod/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
    
      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
---
# Source: gitpod/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: staging-laushinka-self-hosted-v-builtin-5491
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: gitpod/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: messagebus-config
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    load_definitions = /app/load_definition.json
    # Increase statistics emission interval https://www.rabbitmq.com/management.html#statistics-interval
    collect_statistics_interval = 15000
    
    ssl_options.verify = verify_peer
    listeners.ssl.default = 5671
    ssl_options.fail_if_no_peer_cert = true
    ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
    ## Prometheus metrics
    ##
    prometheus.tcp.port = 9419
---
# Source: gitpod/templates/auth-providers-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-providers-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  auth-providers.json: "[]"
---
# Source: gitpod/templates/blobserve-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: blobserve-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "dockerAuth": "/mnt/pull-secret.json",
        "pprofAddr": ":6060",
        "prometheusAddr": "127.0.0.1:9500"
        , "blobserve": {
            "port": 32224,
            "timeout": "5s",
            "repos": {
                "gcr.io/gitpod-io/self-hosted/ide/theia": {
                    "prePull": ["x.x.x"],
                    "workdir": "/theia/theia-app/app/lib"
                },
                "gcr.io/gitpod-io/self-hosted/ide/code": {
                    "prePull": ["x.x.x"],
                    "workdir": "/ide",
                    "replacements": [
                        { "search": "vscode-webview.net", "replacement": "localhost", "path": "/ide/out/vs/workbench/workbench.web.api.js" },
                        { "search": "vscode-webview.net", "replacement": "localhost", "path": "/ide/out/vs/workbench/services/extensions/worker/extensionHostWorker.js" }
                    ],
                    "inlineStatic": [
                        { "search": "${window.location.origin}", "replacement": "." },
                        { "search": "value.startsWith(window.location.origin)", "replacement": "value.startsWith(window.location.origin) || value.startsWith('${ide}')" },
                        { "search": "./out", "replacement": "${ide}/out" },
                        { "search": "./node_modules", "replacement": "${ide}/node_modules" },
                        { "search": "/_supervisor/frontend", "replacement": "${supervisor}" }
                    ]
                },
                "gcr.io/gitpod-io/self-hosted/supervisor": {
                    "prePull": ["x.x.x"],
                    "workdir": "/.supervisor/frontend"
                }
            },
            "blobSpace": {
                "location": "/mnt/cache/blobserve",
                "maxSizeBytes": 1073741824
            }
        }
    }
---
# Source: gitpod/templates/content-service-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: content-service-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
      "pprof": {
        "address": ":6060"
      },
      "prometheus": {
        "address": ":9500"
      },
      "service": {
        "address": ":8080"
      },
      "storage": {
        "blobQuota": 0,
        "kind": "minio",
        "minio": {
          "accessKey": "xxxxx",
          "endpoint": "minio.localhost",
          "parallelUpload": null,
          "region": "local",
          "secretKey": "xxxxx",
          "secure": true
        }
      }
    }
---
# Source: gitpod/templates/db-initscripts-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
  labels:
    app: RELEASE-NAME
    component: db
    kind: configmap
    stage: production
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  init.sql: |-
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    
    -- create test DB user
    SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, 'test');
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    -- create user (parameterized)
    SET @statementStr = CONCAT(
        'CREATE USER IF NOT EXISTS "gitpod"@"%" IDENTIFIED BY "', @gitpodDbPassword, '";'
    );
    SELECT @statementStr ;
    PREPARE stmt FROM @statementStr; EXECUTE stmt; DEALLOCATE PREPARE stmt;
    
    -- Grant privileges
    GRANT ALL ON `gitpod%`.* TO "gitpod"@"%";
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    CREATE DATABASE IF NOT EXISTS `gitpod-sessions` CHARSET utf8mb4;
    
    USE `gitpod-sessions`;
    
    CREATE TABLE IF NOT EXISTS sessions (
       `session_id` varchar(128) COLLATE utf8mb4_bin NOT NULL,
       `expires` int(11) unsigned NOT NULL,
       `data` text COLLATE utf8mb4_bin,
       `_lastModified` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
       PRIMARY KEY (`session_id`)
    );
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    -- @gitpodDB contains name of the DB the script manipulates, 'gitpod' by default.
    -- Prepend the script with "SET @gitpodDB = '`<db-name>`'" if needed otherwise
    SET @gitpodDB = IFNULL(@gitpodDB, '`gitpod`');
    
    SET @statementStr = CONCAT('DROP DATABASE IF EXISTS ', @gitpodDB);
    PREPARE statement FROM @statementStr;
    EXECUTE statement;
    
    SET @statementStr = CONCAT('CREATE DATABASE ', @gitpodDB, ' CHARSET utf8mb4');
    PREPARE statement FROM @statementStr;
    EXECUTE statement;
---
# Source: gitpod/templates/image-builder-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: image-builder-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  image-builder.json: |-
    {
        "builder": {"dockerCfgFile": "/config/pull-secret.json","gitpodLayerLoc": "/app/workspace-image-layer.tar.gz",
            "baseImageRepository": "registry.localhost/base-images",
            "workspaceImageRepository": "registry.localhost/workspace-images",
            "imageBuildSalt": "",
            "alpineImage": "alpine:3.14",
            "selfBuildBaseImage": ""
        },
        "refCache": {
            "interval": "6h",
            "refs": ["gitpod/workspace-full:latest"]
        },
        "pprof": {
            "address": ":6060"
        },
        "prometheus": {
            "address": "127.0.0.1:9500"
        },
        "service": {
            "address": ":8080"
        }
    }
---
# Source: gitpod/templates/image-builder-mk3-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: image-builder-mk3-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  image-builder.json: |-
    {
        "orchestrator": {"authFile": "/config/pull-secret.json","gitpodLayerLoc": "/app/workspace-image-layer.tar.gz",
            "baseImageRepository": "registry.localhost/base-images",
            "workspaceImageRepository": "registry.localhost/workspace-images",
            "imageBuildSalt": "","wsman": {
                "address": "ws-manager:8080",
                "tls": {
                    "ca": "/wsman-certs/ca.crt",
                    "crt": "/wsman-certs/tls.crt",
                    "key": "/wsman-certs/tls.key"
                }
            },"builderImage": "gcr.io/gitpod-io/self-hosted/image-builder-mk3/bob:x.x.x",
            "builderAuthKeyFile": "/config/authkey"
        },
        "refCache": {
            "interval": "6h",
            "refs": ["gitpod/workspace-full:latest"]
        },
        "pprof": {
            "address": ":6060"
        },
        "prometheus": {
            "address": "127.0.0.1:9500"
        },
        "service": {
            "address": ":8080"
        }
    }
---
# Source: gitpod/templates/proxy-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  vhost.empty: |
    # Placeholder to avoid errors loading files using a glob pattern
  vhost.minio: |
    https://minio.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      reverse_proxy minio.staging-laushinka-self-hosted-v-builtin-5491.{$KUBE_DOMAIN}:9000 {
        flush_interval -1
      }
    }


  vhost.docker-registry: |
    https://registry.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      basicauth bcrypt "Docker Registry" {
        XwkyKHFut38l6erbjt7I JDJhJDEwJDR0NzIxYklENFQ0QTN2V3hJaURjUk9PdHl1QnM2azJxaEZTdmJrZlk2YUdRc25COEdmSmFX
      }

      reverse_proxy https://registry.staging-laushinka-self-hosted-v-builtin-5491.svc.cluster.local {
        flush_interval -1
        transport http {
          tls_trusted_ca_certs /etc/caddy/registry-certs/ca.crt
        }
      }
    }
---
# Source: gitpod/templates/registry-facade-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-facade-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "dockerAuth": "/mnt/pull-secret.json",
        "registry": {
            "port": 32223,
            "tls": {
                "crt": "/mnt/certificates/tls.crt",
                "key": "/mnt/certificates/tls.key"
            },
            "remoteSpecProvider": {
                "addr": "dns:///ws-manager:8080",
                "tls": {
                    "ca": "/ws-manager-client-tls-certs/ca.crt",
                    "crt": "/ws-manager-client-tls-certs/tls.crt",
                    "key": "/ws-manager-client-tls-certs/tls.key"
                }
            },
            "store": "/mnt/cache/registry",
            "requireAuth": false,
            "staticLayer": [
                {
                    "ref": "gcr.io/gitpod-io/self-hosted/supervisor:x.x.x",
                    "type": "image"
                },
                {
                    "ref": "gcr.io/gitpod-io/self-hosted/docker-up:x.x.x",
                    "type": "image"
                }
            ]
        },
        "pprofAddr": ":6060",
        "prometheusAddr": "127.0.0.1:9500"
    }
---
# Source: gitpod/templates/restarter-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: restarter-scripts
  labels:
    app: RELEASE-NAME
    component: restarter
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  run.sh: |
    #!/usr/bin/env sh
    kubectl rollout restart deployment proxy -n staging-laushinka-self-hosted-v-builtin-5491
    kubectl rollout restart daemonset registry-facade -n staging-laushinka-self-hosted-v-builtin-5491
    kubectl rollout restart deployment ws-proxy -n staging-laushinka-self-hosted-v-builtin-5491
---
# Source: gitpod/templates/server-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: server-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "version": "x.x.x",
        "hostUrl": "https://localhost",
        "installationShortname": "local-00",
        "stage": "production",
        "license": "",
        "workspaceHeartbeat": {"intervalSeconds":60,"timeoutSeconds":300},
        "workspaceDefaults": {
            "workspaceImage": "gitpod/workspace-full:latest",
            "previewFeatureFlags": [],
            "defaultFeatureFlags": []
        },
        "session": {"maxAgeMs":259200000,"secret":"Important!Really-Change-This-Key!"},
        "githubApp": {"authProviderId":"Public-GitHub","enabled":false,"logLevel":"trace"},
        "definitelyGpDisabled": false,
        "workspaceGarbageCollection": {"chunkLimit":1000,"contentChunkLimit":1000,"contentRetentionPeriodDays":21,"disabled":false,"minAgeDays":14,"minAgePrebuildDays":7,"startDate":null},
        "enableLocalApp": false,
        "authProviderConfigs": [],
        "disableDynamicAuthProviderLogin": false,
        "brandingConfig": {"homepage":"https://www.gitpod.io/","links":{"footer":[{"name":"Docs","url":"https://www.gitpod.io/docs/"},{"name":"Blog","url":"https://www.gitpod.io/blog/"},{"name":"Status","url":"https://status.gitpod.io/"}],"header":[{"name":"Workspaces","url":"/workspaces/"},{"name":"Docs","url":"https://www.gitpod.io/docs/"},{"name":"Blog","url":"https://www.gitpod.io/blog/"},{"name":"Community","url":"https://community.gitpod.io/"}],"legal":[{"name":"Imprint","url":"https://www.gitpod.io/imprint/"},{"name":"Privacy Policy","url":"https://www.gitpod.io/privacy/"},{"name":"Terms of Service","url":"https://www.gitpod.io/terms/"}],"social":[{"type":"GitHub","url":"https://github.com/gitpod-io/gitpod"},{"type":"Discourse","url":"https://community.gitpod.io/"},{"type":"Twitter","url":"https://twitter.com/gitpod"}]},"logo":"/images/gitpod-ddd.svg"},
        "maxEnvvarPerUserCount": 4048,
        "maxConcurrentPrebuildsPerRef": 10,
        "incrementalPrebuilds": {"commitHistory":100,"repositoryPasslist":[]},
        "blockNewUsers": {"enabled":false,"passlist":[]},
        "makeNewUsersAdmin": false,
        "defaultBaseImageRegistryWhitelist": [],
        "runDbDeleter": true,
        "oauthServer": {
            "enabled": false
        },
        "rateLimiter": {"functions":{"closePort":{"group":"inWorkspaceUserAction"},"controlAdmission":{"group":"inWorkspaceUserAction"},"openPort":{"group":"inWorkspaceUserAction"},"shareSnapshot":{"group":"inWorkspaceUserAction"}},"groups":{"inWorkspaceUserAction":{"durationsSec":2,"points":10}}},
        "contentServiceAddr": "content-service:8080",
        "imageBuilderAddr": "image-builder-mk3:8080",
        "codeSync": {},
        "vsxRegistryUrl": "https://open-vsx.org",
        "enablePayment": false,
        "insecureNoDomain": false,
        "chargebeeProviderOptionsFile": "/chargebee/providerOptions"
    }
---
# Source: gitpod/templates/server-ide-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: ConfigMap
metadata:
  name: server-ide-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "ideVersion": "commit-2f069ca3b646ab8099c05f7efd181004c08e95cb",
        "ideImageRepo": "gcr.io/gitpod-io/self-hosted/ide/code",
        "ideImageAliases": {"code":"gcr.io/gitpod-io/self-hosted/ide/code:commit-2f069ca3b646ab8099c05f7efd181004c08e95cb","code-latest":"gcr.io/gitpod-io/self-hosted/ide/code:x.x.x"}
    }
---
# Source: gitpod/templates/workspace-template.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-template
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  "default.yaml": |
    {"default":{"spec":{"dnsConfig":null,"dnsPolicy":"None","enableServiceLinks":false,"nameservers":["1.1.1.1","8.8.8.8"]}},"spec":{"imagePullSecrets":[{"name":"builtin-registry-auth"}]}}
---
# Source: gitpod/templates/ws-daemon-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-daemon-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
      "daemon": {
        "content": {
          "backup": {
            "attempts": 3,
            "timeout": "5m"
          },
          "initializer": {
            "command": "/app/content-initializer"
          },
          "storage": {
            "blobQuota": 0,
            "kind": "minio",
            "minio": {
              "accessKey": "xxxxx",
              "endpoint": "minio.localhost",
              "parallelUpload": null,
              "region": "local",
              "secretKey": "xxxxx",
              "secure": true
            }
          },
          "tempDir": "/tmp",
          "userNamespaces": {
            "fsShift": "shiftfs"
          },
          "workingArea": "/mnt/workingarea",
          "workingAreaNode": "/var/gitpod/workspaces",
          "workspaceSizeLimit": "50g"
        },
        "disk": {
          "locations": [
            {
              "minBytesAvail": 21474836480,
              "path": "/mnt/wsdaemon-workingarea"
            }
          ]
        },
        "hosts": {
          "enabled": true,
          "fixedHosts": {
            "registryFacade": [
              {
                "addr": "127.0.0.1",
                "name": "reg.localhost"
              }
            ]
          },
          "nodeHostsFile": "/mnt/hosts"
        },
        "readiness": {
          "addr": ":9999",
          "enabled": true
        },
        "resources": {
          "cgroupBasePath": "/mnt/node-cgroups",
          "controlPeriod": "15m",
          "cpuBuckets": [],
          "processPriorities": {
            "default": 10,
            "shell": 6,
            "supervisor": 0,
            "theia": 5
          },
          "samplingPeriod": "10s"
        },
        "runtime": {
          "containerRuntime": {
            "containerd": {
              "socket": "/mnt/containerd.sock"
            },
            "mounts": {
              "proc": "/mnt/mounts"
            },
            "nodeToContainerMapping": {
              "/run/containerd/io.containerd.runtime.v2.task/k8s.io": "/mnt/node1",
              "/var/lib": "/mnt/node0"
            },
            "runtime": "containerd"
          },
          "namespace": "staging-laushinka-self-hosted-v-builtin-5491"
        },
        "uidmapper": {
          "procLocation": "/proc",
          "rootUIDRange": {
            "size": 1,
            "start": 33333
          },
          "userUIDRange": [
            {
              "size": 70000,
              "start": 100000
            }
          ]
        }
      },
      "pprof": {
        "address": ":6060"
      },
      "prometheus": {
        "address": "127.0.0.1:9500"
      },
      "service": {
        "address": ":8080",
        "tls": {
          "ca": "/certs/ca.crt",
          "crt": "/certs/tls.crt",
          "key": "/certs/tls.key"
        }
      }
    }
---
# Source: gitpod/templates/ws-manager-bridge-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-manager-bridge-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  ws-manager-bridge.json: |-
    {
        "installation": "local-00",
        "wsClusterDBReconcileIntervalSeconds": 60,
        "controllerIntervalSeconds": 60,
        "controllerMaxDisconnectSeconds": 150,
        "clusterService": {
          "host": "localhost",
          "port": "8080"
        },
        "timeouts": {
          "metaInstanceCheckIntervalSeconds": 60,
          "preparingPhaseSeconds": 3600,
          "stoppingPhaseSeconds": 3600,
          "unknownPhaseSeconds": 600
        },
        "staticBridges": [{"govern":true,"maxScore":100,"name":"local-00","score":50,"state":"available","tls":{"ca":"/ws-manager-client-tls-certs/ca.crt","crt":"/ws-manager-client-tls-certs/tls.crt","key":"/ws-manager-client-tls-certs/tls.key"},"url":"dns:///ws-manager:8080"}]
    }
---
# Source: gitpod/templates/ws-manager-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-manager-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "manager": {
            "namespace": "staging-laushinka-self-hosted-v-builtin-5491",
            "schedulerName": "workspace-scheduler",
            "seccompProfile": "localhost/workspace_default_x.x.x.json",
            "dryRun": false,
            "wsdaemon": {
                "port": 8080,
                "tls": {
                    "ca": "/ws-daemon-tls-certs/ca.crt",
                    "crt": "/ws-daemon-tls-certs/tls.crt",
                    "key": "/ws-daemon-tls-certs/tls.key"
                }
            },
            "container": {
                "workspace": {
                    "requests": {"cpu":"1m","memory":"2.25Gi","storage":"5Gi"},
                    
                    "limits": {"cpu":"5","memory":"12Gi"},
                    "image": "OVERWRITTEN-IN-REQUEST"
                }
            },
            "heartbeatInterval": "30s",
            "hostURL": "https://localhost",
            "workspaceClusterHost": "ws.localhost",
            "initProbe": {
                "timeout": "1s"
            },
            "urlTemplate":     "https://{{ .Prefix }}.ws.localhost",
            "portUrlTemplate": "https://{{ .WorkspacePort }}-{{ .Prefix }}.ws.localhost",
            "workspaceHostPath": "/var/gitpod/workspaces",
            "podTemplate": {"defaultPath": "/workspace-template/default.yaml"
            },
            "timeouts": {
                "afterClose": "2m",
                "headlessWorkspace": "60m",
                "initialization": "30m",
                "regularWorkspace": "30m",
                "startup": "60m",
                "contentFinalization": "60m",
                "stopping": "60m",
                "interrupted": "5m"
            },
            
            "reconnectionInterval": "30s",
            "registryFacadeHost": "reg.localhost:3000"
            
        },
        "content": {"storage":{"blobQuota":0,"kind":"minio","minio":{"accessKey":"xxxxx","endpoint":"minio.localhost","parallelUpload":null,"region":"local","secretKey":"xxxxx","secure":true}}},
        "rpcServer": {
            "addr": ":8080",
            "tls": {
                "ca": "/certs/ca.crt",
                "crt": "/certs/tls.crt",
                "key": "/certs/tls.key"
            }
        },
        "pprof": {
            "addr": "localhost:6060"
        },
        "prometheus": {
            "addr": "127.0.0.1:9500"
        }
    }
---
# Source: gitpod/templates/ws-proxy-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-proxy-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "ingress": {
            "httpAddress": ":8080",
            "httpsAddress": ":9090",
            "header": "x-wsproxy-host"
        },
        "workspaceInfoProviderConfig": {
            "wsManagerAddr": "ws-manager:8080",
            "reconnectInterval": "3s",
            "tls": {
                "ca": "/ws-manager-client-tls-certs/ca.crt",
                "crt": "/ws-manager-client-tls-certs/tls.crt",
                "key": "/ws-manager-client-tls-certs/tls.key"
            }
        },
        "proxy": {
            "https": {
                "crt": "/mnt/certificates/tls.crt",
                "key": "/mnt/certificates/tls.key"
            },
            "transportConfig": {
                "connectTimeout": "10s",
                "idleConnTimeout": "60s",
                "maxIdleConns": 0,
                "maxIdleConnsPerHost": 100
            },
            "blobServer": {
                "scheme": "http",
                "host": "blobserve.staging-laushinka-self-hosted-v-builtin-5491.svc.cluster.local:4000"
            },
            "gitpodInstallation": {
                "scheme": "https",
                "hostName": "localhost",
                "workspaceHostSuffix": ".ws.localhost",
                "workspaceHostSuffixRegex": "\\.ws[^\\.]*\\.localhost"
            },
            "workspacePodConfig": {
                "serviceTemplate": "http://ws-{{ .workspaceID }}-theia.staging-laushinka-self-hosted-v-builtin-5491.svc.cluster.local:{{ .port }}",
                "portServiceTemplate": "http://ws-{{ .workspaceID }}-ports.staging-laushinka-self-hosted-v-builtin-5491.svc.cluster.local:{{ .port }}",
                "theiaPort": 23000,
                "supervisorPort": 22999,
                "supervisorImage": "gcr.io/gitpod-io/self-hosted/supervisor:x.x.x"
            },
            "builtinPages": {
                "location": "/app/public"
            }
        },
        "pprofAddr": ":6060",
        "readinessProbeAddr": ":60088",
        "prometheusAddr": ":60095"
    }
---
# Source: gitpod/templates/ws-scheduler-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-scheduler-config
  labels:
    app: RELEASE-NAME
    chart: "gitpod-0.4.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  config.json: |-
    {
        "pprof": {
            "addr": "localhost:6060"
        },
        "prometheus": {
            "addr": "127.0.0.1:9500"
        },
        "scheduler": {
            "schedulerName": "workspace-scheduler",
            "namespace": "staging-laushinka-self-hosted-v-builtin-5491",
            "nodeLabelSelector": {},
            "strategyName": "DensityAndExperience",
            "densityAndExperienceConfig": {
                "workspaceFreshPeriodSeconds": 120,
                "nodeFreshWorkspaceLimit": 2
            }
            , "rateLimit": {
                "maxRPS": 10
            }
        }
        
    }
---
# Source: gitpod/charts/minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "500Gi"
---
# Source: gitpod/templates/cluster-privileged-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:privileged
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-privileged
---
# Source: gitpod/templates/cluster-restricted-root-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-restricted-root-user
---
# Source: gitpod/templates/cluster-unprivileged-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-unprivileged
---
# Source: gitpod/templates/image-builder-mk3-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-image-builder-mk3
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-privileged-unconfined
---
# Source: gitpod/templates/image-builder-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-image-builder
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-privileged-unconfined
---
# Source: gitpod/templates/kube-rbac-proxy-clusterrole.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
rules:
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]
---
# Source: gitpod/templates/registry-facade-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-registry-facade
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-registry-facade
---
# Source: gitpod/templates/ws-daemon-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-daemon
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: clusterrole
    stage: production
rules:
- apiGroups:
  - "policy"
  resources:
  - "podsecuritypolicies"
  verbs:
  - "use"
  resourceNames:
  - "staging-laushinka-self-hosted-v-builtin-5491-ns-privileged-unconfined"
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - update
  - patch
---
# Source: gitpod/templates/ws-scheduler-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-scheduler
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: role
    stage: production
rules:
  - apiGroups:
    - ""
    resources:
    - "nodes"
    verbs:
    - "get"
    - "list"
    - "watch"
  - apiGroups:
    - ""
    resources:
    - "pods"
    verbs:
    - "delete"
    - "get"
    - "list"
    - "watch"
    - "update"
    - "patch"
  - apiGroups:
    - ""
    resources:
    - "pods/status"
    verbs:
    - "update"
  - apiGroups:
    - ""
    resources:
    - "pods/binding"
    - "events"
    verbs:
    - "create"
  - apiGroups:
    - "policy"
    resources:
    - "podsecuritypolicies"
    verbs:
    - "use"
    resourceNames:
    - "staging-laushinka-self-hosted-v-builtin-5491-ns-unprivileged"
---
# Source: gitpod/templates/blobserve-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-blobserve-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: blobserve
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/cluster-unprivileged-psp-nobody-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-nobody
  labels:
    app: RELEASE-NAME
    component: cluster
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: nobody
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-mk3-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-image-builder-mk3-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder-mk3
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-image-builder-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/registry-facade-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-registry-facade-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: registry-facade
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-server-rb-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-daemon-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ws-daemon-rb-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-daemon
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ws-manager-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-scheduler-clusterrolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-scheduler
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-scheduler
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-scheduler-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-scheduler-kube-rbac-proxy
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-scheduler
  namespace: staging-laushinka-self-hosted-v-builtin-5491
roleRef:
  kind: ClusterRole
  name:  staging-laushinka-self-hosted-v-builtin-5491-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
    resourceNames:
      - minio-prometheus
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
    resourceNames:
      - minio
---
# Source: gitpod/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: gitpod/templates/server-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server
  labels:
    app: RELEASE-NAME
    component: server
    kind: role
    stage: production
rules:
- apiGroups:
  - ''
  resources:
  - services
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
- apiGroups:
  - ''
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
---
# Source: gitpod/templates/workspace-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: workspace
  labels:
    app: RELEASE-NAME
    component: workspace
    kind: role
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - staging-laushinka-self-hosted-v-builtin-5491-ns-workspace
---
# Source: gitpod/templates/ws-manager-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: role
    stage: production
  name: ws-manager
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - events
  - services
  - endpoints
  - configmaps
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: minio-update-prometheus-secret
subjects:
  - kind: ServiceAccount
    name: minio-update-prometheus-secret
    namespace: "staging-laushinka-self-hosted-v-builtin-5491"
---
# Source: gitpod/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: messagebus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: messagebus-endpoint-reader
---
# Source: gitpod/templates/blobserve-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: blobserve
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: blobserve
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/content-service-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: content-service
  labels:
    app: RELEASE-NAME
    component: content-service
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: content-service
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/dashboard-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dashboard
  labels:
    app: RELEASE-NAME
    component: dashboard
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: dashboard
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/db-migrations-restricted-root-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: db-migrations
  labels:
    app: RELEASE-NAME
    component: db
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: db-migrations
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/db-restricted-root-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: db
  labels:
    app: RELEASE-NAME
    component: db
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: db
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-mk3-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: image-builder-mk3-rb
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder-mk3
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-image-builder-mk3
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: image-builder-rb
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-image-builder
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/messagebus-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus
  labels:
    app: RELEASE-NAME
    component: messagebus
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: messagebus
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/proxy-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy
  labels:
    app: RELEASE-NAME
    component: proxy
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: proxy
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/registry-facade-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: registry-facade
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: registry-facade
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-registry-facade
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server
  labels:
    app: RELEASE-NAME
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
roleRef:
  kind: Role
  name: server
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-unprivileged-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server-unprivileged
  labels:
    app: RELEASE-NAME
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/workspace-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: workspace
  labels:
    app: RELEASE-NAME
    component: workspace
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: workspace
roleRef:
  kind: Role
  name: workspace
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-daemon-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-daemon-rb
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-daemon
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-ws-daemon
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-bridge-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-manager-bridge
  labels:
    app: RELEASE-NAME
    component: ws-manager-bridge
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager-bridge
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ws-manager
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: role-binding
    stage: production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ws-manager
subjects:
- kind: ServiceAccount
  name: ws-manager
---
# Source: gitpod/templates/ws-manager-unpriviliged-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-manager-unpriviledged
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-proxy-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-proxy
  labels:
    app: RELEASE-NAME
    component: ws-proxy
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-proxy
roleRef:
  kind: ClusterRole
  name: staging-laushinka-self-hosted-v-builtin-5491-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/charts/docker-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      protocol: TCP
      name: https-443
      targetPort: 5000
  selector:
    app: docker-registry
    release: RELEASE-NAME
---
# Source: gitpod/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: RELEASE-NAME
---
# Source: gitpod/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: staging-laushinka-self-hosted-v-builtin-5491
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: primary
---
# Source: gitpod/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: staging-laushinka-self-hosted-v-builtin-5491
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: primary
---
# Source: gitpod/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus-headless
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-tls
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: gitpod/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-ssl
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
    - name: metrics
      port: 9419
      targetPort: metrics
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: gitpod/templates/blobserve-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: blobserve
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: service
    stage: production
spec:
  ports:
  - name: service
    protocol: TCP
    
    
    port: 4000
    targetPort: 32224
  selector:
    app: RELEASE-NAME
    component: blobserve
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/content-service-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: content-service
  labels:
    app: RELEASE-NAME
    component: content-service
    kind: service
    stage: production
spec:
  ports:
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: RELEASE-NAME
    component: content-service
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/dashboard-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: dashboard
  labels:
    app: RELEASE-NAME
    component: dashboard
    kind: service
    stage: production
spec:
  ports:
  - name: http
    protocol: TCP
    
    
    port: 3001
    targetPort: 80
  selector:
    app: RELEASE-NAME
    component: dashboard
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/db-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


kind: Service
apiVersion: v1
metadata:
  name: db
  labels:
    app: RELEASE-NAME
    component: db
    kind: service
    stage: production
spec:
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  selector:
    app.kubernetes.io/name: mysql
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/image-builder-mk3-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: image-builder-mk3
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: service
    stage: production
spec:
  ports:
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/image-builder-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: image-builder
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: service
    stage: production
spec:
  ports:
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: RELEASE-NAME
    component: image-builder
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/proxy-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: proxy
  labels:
    app: RELEASE-NAME
    component: proxy
    kind: service
    stage: production
spec:
  ports:
  - name: http
    protocol: TCP
    
    port: 80
    
  - name: https
    protocol: TCP
    
    port: 443
    
  selector:
    app: RELEASE-NAME
    component: proxy
    kind: pod
    stage: production
  type: LoadBalancer
  sessionAffinity: None
---
# Source: gitpod/templates/registry-facade-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: registry-facade
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: service
    stage: production
    feature: registry
spec:
  ports:
  - name: registry
    protocol: TCP
    
    
    port: 3000
    targetPort: 32223
  selector:
    app: RELEASE-NAME
    component: registry-facade
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/server-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: server
  labels:
    app: RELEASE-NAME
    component: server
    kind: service
    stage: production
spec:
  ports:
  - name: debug
    protocol: TCP
    
    port: 9229
    
  - name: http
    protocol: TCP
    
    
    port: 3000
    targetPort: 3000
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  selector:
    app: RELEASE-NAME
    component: server
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/ws-daemon-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-daemon
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: service
    stage: production
spec:
  ports:
  selector:
    app: RELEASE-NAME
    component: ws-daemon
    kind: daemonset
    stage: production
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
---
# Source: gitpod/templates/ws-manager-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-manager
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: service
    stage: production
spec:
  ports:
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: RELEASE-NAME
    component: ws-manager
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/ws-proxy-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-proxy
  labels:
    app: RELEASE-NAME
    component: ws-proxy
    kind: service
    stage: production
spec:
  ports:
  - name: httpproxy
    protocol: TCP
    
    port: 8080
    
  - name: httpsproxy
    protocol: TCP
    
    port: 9090
    
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  selector:
    app: RELEASE-NAME
    component: ws-proxy
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/registry-facade-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: registry-facade
  labels:
    app: RELEASE-NAME
    component: registry-facade
    kind: deployment
    stage: production
    gitpod.io/nodeService: registry-facade
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: registry-facade
      kind: pod
      stage: production
      gitpod.io/nodeService: registry-facade
  template:
    metadata:
      name: registry-facade
      labels:
        app: RELEASE-NAME
        component: registry-facade
        kind: pod
        stage: production
        gitpod.io/nodeService: registry-facade
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: registry-facade
      enableServiceLinks: false
      containers:
      - name: registry-facade
        image: gcr.io/gitpod-io/self-hosted/registry-facade:x.x.x
        args: ["run", "-v", "/mnt/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        ports:
        - name: registry
          containerPort: 32223
          hostPort: 3000
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
        volumeMounts:
        - name: cache
          mountPath: "/mnt/cache"
        - name: config
          mountPath: "/mnt/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        - name: pull-secret
          mountPath: /mnt/pull-secret.json
          subPath: .dockerconfigjson
        - name: https-certificates
          mountPath: "/mnt/certificates"
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: cache
        emptyDir: {}
      - name: config
        configMap:
          name: registry-facade-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      - name: https-certificates
        secret:
          secretName: https-certificates
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-daemon-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ws-daemon
  labels:
    app: RELEASE-NAME
    component: ws-daemon
    kind: daemonset
    stage: production
    gitpod.io/nodeService: ws-daemon
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-daemon
      kind: daemonset
      stage: production
      gitpod.io/nodeService: ws-daemon
  template:
    metadata:
      labels:
        app: RELEASE-NAME
        component: ws-daemon
        kind: daemonset
        stage: production
        gitpod.io/nodeService: ws-daemon
      annotations:
        checksum/tlskey: ca3d521b7b7adc11242bfc6eab147263b160f51025320810340ef7b96240aee6
    spec:
      
      priorityClassName: system-node-critical
      tolerations:
      - key: node.kubernetes.io/disk-pressure
        operator: "Exists"
        effect: "NoExecute"
      - key: node.kubernetes.io/memory-pressure
        operator: "Exists"
        effect: "NoExecute"
      - key: node.kubernetes.io/out-of-disk
        operator: "Exists"
        effect: "NoExecute"
      serviceAccountName: ws-daemon
      hostPID: true
      volumes:
      - name: hostfs
        hostPath:
          path: /
      - hostPath:
          path: /var/gitpod/workspaces
          type: DirectoryOrCreate
        name: working-area
      - name: tls-certs
        secret:
          secretName: ws-daemon-tls
      - name: config
        configMap:
          name: ws-daemon-config
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      - name: node-fs0
        hostPath:
          path: /var/lib
          type: Directory
      - name: node-fs1
        hostPath:
          path: /run/containerd/io.containerd.runtime.v2.task/k8s.io
          type: Directory
      - name: node-mounts
        hostPath:
          path: /proc/mounts
          type: File
      - name: node-cgroups
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: node-hosts
        hostPath:
          path: /etc/hosts
          type: File
      - name: hostseccomp
        hostPath:
          path: /var/lib/kubelet/seccomp
      enableServiceLinks: false
      initContainers:
      - name: seccomp-profile-installer
        volumeMounts:
        - mountPath: /mnt/dst
          name: hostseccomp
        image: gcr.io/gitpod-io/self-hosted/seccomp-profile-installer:x.x.x
        securityContext:
          privileged: true
        command: ["/bin/sh", "-c", "cp -f /installer/workspace_default.json /mnt/dst/workspace_default_x.x.x.json"]
      - name: sysctl
        image: gcr.io/gitpod-io/self-hosted/ws-daemon:x.x.x
        securityContext:
          privileged: true
        command:
          - sh
          - -c
          - >
            (
              echo "running sysctls" &&
              sysctl -w net.core.somaxconn=4096 &&
              sysctl -w "net.ipv4.ip_local_port_range=5000 65000" &&
              sysctl -w "net.ipv4.tcp_tw_reuse=1" &&
              sysctl -w fs.inotify.max_user_watches=1000000 &&
              sysctl -w "kernel.dmesg_restrict=1" &&
              sysctl -w vm.unprivileged_userfaultfd=0
            ) && echo "done!" || echo "failed!"
      containers:
      - name: ws-daemon
        volumeMounts:
        - mountPath: /mnt/workingarea
          name: working-area
          mountPropagation: Bidirectional
        - mountPath: /config
          name: config
        - mountPath: /mnt/containerd.sock
          name: containerd-socket
        - mountPath: /mnt/node0
          name: node-fs0
        - mountPath: /mnt/node1
          name: node-fs1
        - mountPath: /mnt/mounts
          name: node-mounts
          readOnly: true
          mountPropagation: HostToContainer
        - mountPath: /mnt/node-cgroups
          name: node-cgroups
          mountPropagation: HostToContainer
        - mountPath: /mnt/hosts
          name: node-hosts
        - mountPath: /certs
          name: tls-certs
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-daemon:x.x.x
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: rpc
          containerPort: 8080
          hostPort: 8080
        readinessProbe:
          httpGet:
            port: 9999
            path: "/"
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            port: 9999
            path: "/"
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 10
        securityContext:
          privileged: true
          procMount: Default
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/charts/docker-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: docker-registry
      release: RELEASE-NAME
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: docker-registry
        release: RELEASE-NAME
      annotations:
        checksum/config: a8f6f62a8d401d9a3337f77129bcb2296c3855e3692594a1313f8dbceabcb19d
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: docker-registry
          image: "registry:2.7.1"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          resources:
            {}
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: haSharedSecret
            - name: REGISTRY_HTTP_TLS_CERTIFICATE
              value: /etc/ssl/docker/tls.crt
            - name: REGISTRY_HTTP_TLS_KEY
              value: /etc/ssl/docker/tls.key
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: data
              mountPath: /var/lib/registry/
            - name: "registry-config"
              mountPath: "/etc/docker/registry"
            - mountPath: /etc/ssl/docker
              name: tls-cert
              readOnly: true
      volumes:
        - name: data
          emptyDir: {}
        - name: registry-config
          configMap:
            name: registry-config
        - name: tls-cert
          secret:
            secretName: builtin-registry-certs
---
# Source: gitpod/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: RELEASE-NAME
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: RELEASE-NAME
  template:
    metadata:
      name: minio
      labels:
        app: minio
        release: RELEASE-NAME
      annotations:
        checksum/secrets: d39ceb6b7bad8f3252e862217561d0cc6bd4a8e934df335ce8eb9e6833f30bbf
        checksum/config: 8d80c7088b2c21ed1f5957a875ed3959c371118e73b940f64240c292595e5284
    spec:
      serviceAccountName: "minio"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2021-02-14T04-01-33Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:
            - name: export
              mountPath: /export            
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: secretkey
          resources:
            requests:
              memory: 2G      
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: minio
        - name: minio-user
          secret:
            secretName: minio
---
# Source: gitpod/templates/blobserve-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blobserve
  labels:
    app: RELEASE-NAME
    component: blobserve
    kind: deployment
    stage: production
    gitpod.io/nodeService: blobserve
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: blobserve
      kind: pod
      stage: production
      gitpod.io/nodeService: blobserve
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: blobserve
      labels:
        app: RELEASE-NAME
        component: blobserve
        kind: pod
        stage: production
        gitpod.io/nodeService: blobserve
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      serviceAccountName: blobserve
      enableServiceLinks: false
      containers:
      - name: blobserve
        image: gcr.io/gitpod-io/self-hosted/blobserve:x.x.x
        args: ["run", "-v", "/mnt/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        volumeMounts:
        - name: config
          mountPath: "/mnt/config"
          readOnly: true
        - name: cache
          mountPath: "/mnt/cache"
        - name: pull-secret
          mountPath: /mnt/pull-secret.json
          subPath: .dockerconfigjson
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: cache
        emptyDir: {}
      - name: config
        configMap:
          name: blobserve-config
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/content-service-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: content-service
  labels:
    app: RELEASE-NAME
    component: content-service
    kind: deployment
    stage: production
    gitpod.io/nodeService: content-service
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: content-service
      kind: pod
      stage: production
      gitpod.io/nodeService: content-service
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: content-service
      labels:
        app: RELEASE-NAME
        component: content-service
        kind: pod
        stage: production
        gitpod.io/nodeService: content-service
    spec:
      
      serviceAccountName: content-service
      enableServiceLinks: false
      containers:
      - name: content-service
        image: gcr.io/gitpod-io/self-hosted/content-service:x.x.x
        args: ["run", "-v", "--config", "/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        ports:
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: content-service-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/dashboard-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  labels:
    app: RELEASE-NAME
    component: dashboard
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: dashboard
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: dashboard
      labels:
        app: RELEASE-NAME
        component: dashboard
        kind: pod
        stage: production
      annotations:
        
    spec:
      
      serviceAccountName: dashboard
      enableServiceLinks: false
      containers:
      - name: dashboard
        image: gcr.io/gitpod-io/self-hosted/dashboard:x.x.x
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        ports:
        - name: http
          containerPort: 80
        securityContext:
          privileged: false
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/image-builder-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-builder
  labels:
    app: RELEASE-NAME
    component: image-builder
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: image-builder
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: image-builder
      labels:
        app: RELEASE-NAME
        component: image-builder
        kind: pod
        stage: production
      annotations:
        checksum/builtin-registry-auth: 3cd17606a527e738692215b89fcc7d7e45ea59360bdbfa6c099123e6a1e36d78        
        checksum/image-builder-configmap.yaml: e0102306f969ade32115aebfdc6016e24cdda83df3d1533772ede74a7bc2011d
    spec:
      
      serviceAccountName: image-builder
      volumes:
      - name: configuration
        configMap:
          name: image-builder-config
      - name: dind-storage
        hostPath:
          path: /var/gitpod/docker
          type: DirectoryOrCreate
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      enableServiceLinks: false
      containers:
      - name: dind
        image: docker:19.03-dind
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          runAsUser: 0
        args: [ "dockerd", "--userns-remap=default", "-H tcp://127.0.0.1:2375"]
        volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      - name: service
        image: gcr.io/gitpod-io/self-hosted/image-builder:x.x.x
        args:
        - "run"
        - "-v"
        - "--config"
        - "/config/image-builder.json"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /config/image-builder.json
          subPath: "image-builder.json"
          name: configuration
        - mountPath: /config/pull-secret.json
          subPath: .dockerconfigjson
          name: pull-secret
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        
        ports:
        - name: rpc
          containerPort: 8080
        securityContext:
          runAsUser: 33333
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: DOCKER_HOST
          value: "tcp://localhost:2375"
        - name: GRPC_GO_RETRY
          value: "on"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/image-builder-mk3-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-builder-mk3
  labels:
    app: RELEASE-NAME
    component: image-builder-mk3
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: image-builder-mk3
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: image-builder-mk3
      labels:
        app: RELEASE-NAME
        component: image-builder-mk3
        kind: pod
        stage: production
      annotations:
        checksum/builtin-registry-auth: 5b9aaef1ff502c92dc29abfdbf3e9ad31afe9e25e8d0de71c07ec67589746c77        
        checksum/image-builder-mk3-configmap.yaml: 05894414d167999e9925a8c0b67fd6f433f165babd5c4226db4549856435319e
    spec:
      
      serviceAccountName: image-builder-mk3
      volumes:
      - name: configuration
        configMap:
          name: image-builder-mk3-config
      - name: authkey
        secret:
          secretName: image-builder-mk3-authkey
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      - name: wsman-tls-certs
        secret:
          secretName: ws-manager-tls
      enableServiceLinks: false
      containers:
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      - name: image-builder-mk3
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        image: gcr.io/gitpod-io/self-hosted/image-builder-mk3:x.x.x
        args:
        - "run"
        - "-v"
        - "--config"
        - "/config/image-builder.json"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /config/image-builder.json
          subPath: "image-builder.json"
          name: configuration
        - mountPath: /config/authkey
          subPath: "keyfile"
          name: authkey
        - mountPath: /wsman-certs
          name: wsman-tls-certs
          readOnly: true
        - mountPath: /config/pull-secret.json
          subPath: .dockerconfigjson
          name: pull-secret
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        
        ports:
        - name: rpc
          containerPort: 8080
        securityContext:
          runAsUser: 33333
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/proxy-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Deployment
apiVersion: apps/v1
metadata:
  name: proxy
  labels:
    app: RELEASE-NAME
    component: proxy
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: proxy
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      name: proxy
      labels:
        app: RELEASE-NAME
        component: proxy
        kind: pod
        stage: production
    spec:
      
      serviceAccount: proxy
      securityContext:
        runAsNonRoot: false
      enableServiceLinks: false
      initContainers:
        - name: "sysctl"
          image: "alpine:3.14"
          securityContext:
            privileged: true
          command:
            - sh
            - -c
            - "sysctl -w net.core.somaxconn=32768; sysctl -w net.ipv4.ip_local_port_range='1024 65000'"
      containers:
      - name: proxy
        image: gcr.io/gitpod-io/self-hosted/proxy:x.x.x
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        securityContext:
          privileged: false
        readinessProbe:
          httpGet:
            path: "/ready"
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: vhosts
          mountPath: "/etc/caddy/vhosts"
        - name: builtin-registry-auth
          mountPath: "/etc/caddy/registry-auth"
        - name: builtin-registry-certs
          mountPath: "/etc/caddy/registry-certs"
        - name: config-certificates
          mountPath: "/etc/caddy/certificates"
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: PROXY_DOMAIN
          value: "localhost"
      volumes:
      - name: vhosts
        configMap:
          name: proxy-config
      - name: builtin-registry-auth
        secret:
          secretName: builtin-registry-auth
      - name: builtin-registry-certs
        secret:
          secretName: builtin-registry-certs
      - name: config-certificates
        secret:
          secretName: https-certificates
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/server-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  labels:
    app: RELEASE-NAME
    component: server
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: server
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: server
      labels:
        app: RELEASE-NAME
        component: server
        kind: pod
        stage: production
      annotations:
        
        checksum/server-configmap.yaml: 56d4d3812e4603bb509b4c7aa2a712912c6a5440c0fd3b090897d84539b96d0a
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: server
      enableServiceLinks: false
      initContainers:
      - name: msgbus-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:x.x.x
        args:
        - -v
        - messagebus
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: MESSAGEBUS_USERNAME
          value: "xxxxx"
        - name: MESSAGEBUS_PASSWORD
          value: "xxxxx"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
      - name: database-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:x.x.x
        args:
        - -v
        - database
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
      containers:
      - name: server
        image: gcr.io/gitpod-io/self-hosted/server:x.x.x
        resources:
          requests:
            cpu:  200m
            memory:  200Mi
        
        ports:
        - name: debug
          containerPort: 9229
        - name: http
          containerPort: 3000
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 31001
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
        - mountPath: /ide-config
          name: ide-config
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
        
        
        - name: MESSAGEBUS_USERNAME
          value: "xxxxx"
        - name: MESSAGEBUS_PASSWORD
          value: "xxxxx"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
        - name: CONFIG_PATH
          value: "/config/config.json"
        - name: IDE_CONFIG_PATH
          value: "/ide-config/config.json"
        - name: NODE_ENV
          value: "production"
        - name: SHLVL
          value: "1"
        - name: WSMAN_CFG_MANAGERS
          value: "W3siZ292ZXJuIjp0cnVlLCJtYXhTY29yZSI6MTAwLCJuYW1lIjoibG9jYWwtMDAiLCJzY29yZSI6NTAsInN0YXRlIjoiYXZhaWxhYmxlIiwidGxzIjp7ImNhIjoiL3dzLW1hbmFnZXItY2xpZW50LXRscy1jZXJ0cy9jYS5jcnQiLCJjcnQiOiIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL3Rscy5jcnQiLCJrZXkiOiIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL3Rscy5rZXkifSwidXJsIjoiZG5zOi8vL3dzLW1hbmFnZXI6ODA4MCJ9XQ=="
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: config
        configMap:
          name: server-config
      - name: ide-config
        configMap:
          name: server-ide-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-manager-bridge-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-manager-bridge
  labels:
    app: RELEASE-NAME
    component: ws-manager-bridge
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-manager-bridge
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-manager-bridge
      labels:
        app: RELEASE-NAME
        component: ws-manager-bridge
        kind: pod
        stage: production
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: ws-manager-bridge
      enableServiceLinks: false
      initContainers:
      - name: database-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:x.x.x
        args:
        - -v
        - database
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
      - name: msgbus-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:x.x.x
        args:
        - -v
        - messagebus
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: MESSAGEBUS_USERNAME
          value: "xxxxx"
        - name: MESSAGEBUS_PASSWORD
          value: "xxxxx"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
      containers:
      - name: ws-manager-bridge
        image: gcr.io/gitpod-io/self-hosted/ws-manager-bridge:x.x.x
        resources:
          requests:
            cpu:  100m
            memory:  64Mi
        
        ports:
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 31001
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
        
        
        - name: MESSAGEBUS_USERNAME
          value: "xxxxx"
        - name: MESSAGEBUS_PASSWORD
          value: "xxxxx"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
        - name: WSMAN_BRIDGE_CONFIGPATH
          value: /config/ws-manager-bridge.json
      volumes:
      - name: config
        configMap:
          name: ws-manager-bridge-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-manager-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-manager
  labels:
    app: RELEASE-NAME
    component: ws-manager
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-manager
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-manager
      labels:
        app: RELEASE-NAME
        component: ws-manager
        kind: pod
        stage: production
      annotations:
        
        checksum/ws-manager-configmap.yaml: ec8addd05f7efffb5b921a59e99f42dae692e32e8dae3113bc284f69cb921f95
        checksum/tlskey: 97aac153d3e524c7418ff430bcba97375f553a9b31f9bb200791dc5833acd3ba
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: ws-manager
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-manager-config
      - name: ws-daemon-tls-certs
        secret:
          secretName: ws-daemon-tls
      - name: tls-certs
        secret:
          secretName: ws-manager-tls
      - name: workspace-template
        configMap:
          name: workspace-template
      enableServiceLinks: false
      containers:
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      - name: ws-manager
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-manager:x.x.x
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        ports:
        - name: rpc
          containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - name: workspace-template
          mountPath: "/workspace-template"
          readOnly: true
        - mountPath: /ws-daemon-tls-certs
          name: ws-daemon-tls-certs
          readOnly: true
        - mountPath: /certs
          name: tls-certs
          readOnly: true
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-proxy-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-proxy
  labels:
    app: RELEASE-NAME
    component: ws-proxy
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-proxy
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-proxy
      labels:
        app: RELEASE-NAME
        component: ws-proxy
        kind: pod
        stage: production
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: ws-proxy
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-proxy-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      - name: config-certificates
        secret:
          secretName: https-certificates
      enableServiceLinks: false
      containers:
      - name: ws-proxy
        image: gcr.io/gitpod-io/self-hosted/ws-proxy:x.x.x
        args: ["run", "-v", "/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  64Mi
        
        ports:
        - name: httpproxy
          containerPort: 8080
        - name: httpsproxy
          containerPort: 9090
        - name: metrics
          containerPort: 9500
        readinessProbe:
          initialDelaySeconds: 2
          periodSeconds: 5
          failureThreshold: 10
          httpGet:
            path: /
            port: 60088
        livenessProbe:
          initialDelaySeconds: 2
          periodSeconds: 5
          failureThreshold: 10
          successThreshold: 1
          timeoutSeconds: 2
          httpGet:
            path: /
            port: 60088
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        - name: config-certificates
          mountPath: "/mnt/certificates"
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-scheduler-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-scheduler
  labels:
    app: RELEASE-NAME
    component: ws-scheduler
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: RELEASE-NAME
      component: ws-scheduler
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-scheduler
      labels:
        app: RELEASE-NAME
        component: ws-scheduler
        kind: pod
        stage: production
    spec:
      priorityClassName: system-node-critical
      
      serviceAccountName: ws-scheduler
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-scheduler-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      enableServiceLinks: false
      containers:
      - name: scheduler
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-scheduler:x.x.x
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: staging-laushinka-self-hosted-v-builtin-5491
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 5cacc7ba7f68f03f6c23aa7c49745f39801855e0f5cab9d2705ea2a487b99a26
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: db
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: primary
                namespaces:
                  - "staging-laushinka-self-hosted-v-builtin-5491"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r92
          imagePullPolicy: "Always"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /bitnami/mysql
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:5.7.34-debian-10-r55
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "my_database"
            - name: MYSQL_EXTRA_FLAGS
              value: --explicit-defaults-for-timestamp=OFF
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests:
              memory: 128Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
        - name: custom-init-scripts
          configMap:
            name: db-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitpod/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: messagebus
  namespace: "staging-laushinka-self-hosted-v-builtin-5491"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: messagebus-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.16.0
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: cdba39bfb39710d7180c39354dfe8e574f41b9080384e214431c378415084674
        checksum/secret: d3fffb433b563d981af9eb7b8c9ad551bcd60617cf2e6a19ce542c65b9c0da9a
        
        prometheus.io/port: '9419'
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: messagebus
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: RELEASE-NAME
                namespaces:
                  - "staging-laushinka-self-hosted-v-builtin-5491"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.17-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "messagebus-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: messagebus-erlang-cookie
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "yes"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "no"
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_shovel, rabbitmq_shovel_management, rabbitmq_prometheus"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: +sbwt none +sbwtdcpu none +sbwtdio none
          ports:
            - name: amqp
              containerPort: 5672
            - name: amqp-ssl
              containerPort: 5671
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9419
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
            - name: certs
              mountPath: /opt/bitnami/rabbitmq/certs
            - name: load-definition-volume
              mountPath: /app
              readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: messagebus-certificates-secret-core
            items:
              - key: tls.crt
                path: ca_certificate.pem
              - key: tls.crt
                path: server_certificate.pem
              - key: tls.key
                path: server_key.pem
        - name: configuration
          configMap:
            name: messagebus-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: load-definition-volume
          secret:
            secretName: "load-definition"
        - name: data
          emptyDir: {}
---
# Source: gitpod/templates/agent-smith-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/agent-smith-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/agent-smith-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/agent-smith-role-binding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/agent-smith-role.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/agent-smith-service-account.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/certmanager-ca.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/chargebee-config-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-unprivileged-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/image-builder-registry-auth-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-config-secret.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-role.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-unpriviliged-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-cronjob.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-migrations-job.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: batch/v1
kind: Job
metadata:
  name: db-migrations
  labels:
    app: RELEASE-NAME
    component: db-migrations
    kind: job
    stage: production
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    # see https://github.com/helm/helm/blob/master/docs/charts_hooks.md
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-delete-timeout": "0"
spec:
  template:
    metadata:
      name: db-migrations
      labels:
        app: RELEASE-NAME
        component: db-migrations
        kind: job
        stage: production
    spec:
      
      restartPolicy: Never
      serviceAccountName: db-migrations
      imagePullSecrets:
      enableServiceLinks: false
      containers:
      - name: db-migrations
        image: "gcr.io/gitpod-io/self-hosted/db-migrations:x.x.x"
        env:
        - name: "DB_PASSWORD"
          value: "test"
        - name: "DB_PORT"
          value: "3306"
        - name: "DB_HOST"
          value: "db"
        command: ["sh","-c","cd /app/node_modules/@gitpod/gitpod-db && yarn run wait-for-db && yarn run typeorm migrations:run"]
